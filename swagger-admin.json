{
  "openapi": "3.0.1",
  "info": {
    "title": "MonoCloud Management Api",
    "description": "The Management Web Api Api for managing resources",
    "termsOfService": "https://www.monocloud.com/terms",
    "contact": {
      "name": "Support",
      "url": "https://www.monocloud.com/contact",
      "email": "support@monocloud.com"
    },
    "license": {
      "name": "License",
      "url": "https://www.monocloud.com/license"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/clients/{id}": {
      "get": {
        "tags": [
          "Clients"
        ],
        "summary": "Find a Client by Id",
        "operationId": "FindClientById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Client Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Clients"
        ],
        "summary": "Update a Client",
        "operationId": "PatchClient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Client Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request Body",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchClientRequest"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchClientRequest"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchClientRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Clients"
        ],
        "summary": "Delete a Client",
        "operationId": "DeleteClient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Client Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/v1/clients/{clientId}/secrets/{secretId}": {
      "get": {
        "tags": [
          "Clients"
        ],
        "summary": "Find a Client Secret by Id",
        "operationId": "FindClientSecretById",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secretId",
            "in": "path",
            "description": "Secret Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SecretValue"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretValue"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretValue"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Clients"
        ],
        "summary": "Delete a Client Secret",
        "operationId": "DeleteClientSecret",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secretId",
            "in": "path",
            "description": "Secret Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/v1/clients": {
      "get": {
        "tags": [
          "Clients"
        ],
        "summary": "Get all the Clients",
        "operationId": "GetAllClientsAsync",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-Pagination": {
                "$ref": "#/components/schemas/PaginationHeader"
              }
            },
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Client"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Client"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Client"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Clients"
        ],
        "summary": "Create a Client",
        "operationId": "CreateClient",
        "requestBody": {
          "description": "Request Body",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateClientRequest"
                  }
                ],
                "description": "The Create Client class models an OpenID Connect or OAuth 2.0 client - e.g. a native application, a web application or a JS-based application."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateClientRequest"
                  }
                ],
                "description": "The Create Client class models an OpenID Connect or OAuth 2.0 client - e.g. a native application, a web application or a JS-based application."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateClientRequest"
                  }
                ],
                "description": "The Create Client class models an OpenID Connect or OAuth 2.0 client - e.g. a native application, a web application or a JS-based application."
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/clients/{clientId}/secrets": {
      "post": {
        "tags": [
          "Clients"
        ],
        "summary": "Create a Client Secret",
        "operationId": "CreateClientSecret",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request Body",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateSecretRequest"
                  }
                ],
                "description": "The Create Client Secret class"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateSecretRequest"
                  }
                ],
                "description": "The Create Client Secret class"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateSecretRequest"
                  }
                ],
                "description": "The Create Client Secret class"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Secret"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Secret"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Secret"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/keys": {
      "get": {
        "tags": [
          "Keys"
        ],
        "summary": "Get All Valid Keys",
        "operationId": "GetAllKeyMaterialsAsync",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-Pagination": {
                "$ref": "#/components/schemas/PaginationHeader"
              }
            },
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KeyMaterial"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KeyMaterial"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KeyMaterial"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/keys/{keyId}/rotate": {
      "put": {
        "tags": [
          "Keys"
        ],
        "summary": "Rotate Current Key",
        "operationId": "RotateKey",
        "parameters": [
          {
            "name": "keyId",
            "in": "path",
            "description": "Key Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/keys/{keyId}/revoke": {
      "put": {
        "tags": [
          "Keys"
        ],
        "summary": "Revoke Current Key",
        "operationId": "RevokeKey",
        "parameters": [
          {
            "name": "keyId",
            "in": "path",
            "description": "Key Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/logs": {
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "Get all Log Summary",
        "operationId": "GetAllLogsAsync",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-Pagination": {
                "$ref": "#/components/schemas/PaginationHeader"
              }
            },
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogSummary"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogSummary"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogSummary"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/logs/{id}": {
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "Find a Log by Id",
        "operationId": "FindLogById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Log Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Log"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Log"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Log"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/options/authentication": {
      "patch": {
        "tags": [
          "Options"
        ],
        "summary": "Update Authentication Options",
        "operationId": "PatchAuthenticationOptions",
        "requestBody": {
          "description": "Request Body",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchAuthenticationOptionsRequest"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchAuthenticationOptionsRequest"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchAuthenticationOptionsRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationOptions"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationOptions"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationOptions"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Options"
        ],
        "summary": "Get Authentication Options",
        "operationId": "FindAuthenticationOptions",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationOptions"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationOptions"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationOptions"
                }
              }
            }
          }
        }
      }
    },
    "/v1/options/branding": {
      "patch": {
        "tags": [
          "Options"
        ],
        "summary": "Update Branding Options",
        "operationId": "PatchBrandingOptions",
        "requestBody": {
          "description": "Request Body",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchBrandingOptionsRequest"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchBrandingOptionsRequest"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchBrandingOptionsRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BrandingOptions"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandingOptions"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandingOptions"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Options"
        ],
        "summary": "Get Branding Options",
        "operationId": "FindBrandingOptions",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BrandingOptions"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandingOptions"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandingOptions"
                }
              }
            }
          }
        }
      }
    },
    "/v1/options/communication": {
      "patch": {
        "tags": [
          "Options"
        ],
        "summary": "Update Communication Options",
        "operationId": "PatchCommunicationOptions",
        "requestBody": {
          "description": "Request Body",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchCommunicationOptionsRequest"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchCommunicationOptionsRequest"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchCommunicationOptionsRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommunicationOptions"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunicationOptions"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunicationOptions"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Options"
        ],
        "summary": "Get Communication Options",
        "operationId": "FindCommunicationOptions",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommunicationOptions"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunicationOptions"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunicationOptions"
                }
              }
            }
          }
        }
      }
    },
    "/v1/options/device_flow": {
      "patch": {
        "tags": [
          "Options"
        ],
        "summary": "Update DeviceFlow Options",
        "operationId": "PatchDeviceFlowOptions",
        "requestBody": {
          "description": "Request Body",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchDeviceFlowOptionsRequest"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchDeviceFlowOptionsRequest"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchDeviceFlowOptionsRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceFlowOptions"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceFlowOptions"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceFlowOptions"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Options"
        ],
        "summary": "Get DeviceFlow Options",
        "operationId": "FindDeviceFlowOptions",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceFlowOptions"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceFlowOptions"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceFlowOptions"
                }
              }
            }
          }
        }
      }
    },
    "/v1/options/mtls": {
      "patch": {
        "tags": [
          "Options"
        ],
        "summary": "Update Mtls Options",
        "operationId": "PatchMtlsOptions",
        "requestBody": {
          "description": "Request Body",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchMtlsOptionsRequest"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchMtlsOptionsRequest"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchMtlsOptionsRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MtlsOptions"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MtlsOptions"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MtlsOptions"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Options"
        ],
        "summary": "Get Mtls Options",
        "operationId": "FindMtlsOptions",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MtlsOptions"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MtlsOptions"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MtlsOptions"
                }
              }
            }
          }
        }
      }
    },
    "/v1/options/custom_fields": {
      "post": {
        "tags": [
          "Options"
        ],
        "summary": "Create Custom Field Options",
        "operationId": "CreateSignUpCustomField",
        "requestBody": {
          "description": "Request Body",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateSignUpCustomFieldOptionsRequest"
                  }
                ],
                "description": "The Create Sign Up Custom Field Options Request class"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateSignUpCustomFieldOptionsRequest"
                  }
                ],
                "description": "The Create Sign Up Custom Field Options Request class"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateSignUpCustomFieldOptionsRequest"
                  }
                ],
                "description": "The Create Sign Up Custom Field Options Request class"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SignUpCustomFieldOptions"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignUpCustomFieldOptions"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignUpCustomFieldOptions"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/options/custom_fields/{claimName}": {
      "patch": {
        "tags": [
          "Options"
        ],
        "summary": "Update Custom Field Options",
        "operationId": "PatchSignUpCustomField",
        "parameters": [
          {
            "name": "claimName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request Body",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchSignUpCustomFieldOptionsRequest"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchSignUpCustomFieldOptionsRequest"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchSignUpCustomFieldOptionsRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SignUpCustomFieldOptions"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignUpCustomFieldOptions"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignUpCustomFieldOptions"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Options"
        ],
        "summary": "Delete Custom Field Options",
        "operationId": "DeleteSignUpCustomField",
        "parameters": [
          {
            "name": "claimName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/v1/resources/apiresources/{id}": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "Find an Api Resource by Id",
        "operationId": "FindApiResourceById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Api Resource Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Resources"
        ],
        "summary": "Update an Api Resource",
        "operationId": "PatchApiResource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Api Resource Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request Body",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchApiResourceRequest"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchApiResourceRequest"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchApiResourceRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Resources"
        ],
        "summary": "Delete an Api Resource",
        "operationId": "DeleteApiResource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Api Resource Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/v1/resources/apiresources/{resourceId}/secrets/{secretId}": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "Find an Api Resource Secret by Id",
        "operationId": "FindApiResourceSecretById",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Resource Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secretId",
            "in": "path",
            "description": "Secret Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SecretValue"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretValue"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretValue"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Resources"
        ],
        "summary": "Delete an Api Resource Secret",
        "operationId": "DeleteApiResourceSecret",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "ResourceId Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secretId",
            "in": "path",
            "description": "Secret Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/v1/resources/apiscopes/{id}": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "Find an Api Scope by Id",
        "operationId": "FindApiScopeById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Api Scope Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiScope"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiScope"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiScope"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Resources"
        ],
        "summary": "Update an Api Scope",
        "operationId": "PatchApiScope",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Api Scope Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request Body",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchApiScopeRequest"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchApiScopeRequest"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchApiScopeRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiScope"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiScope"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiScope"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Resources"
        ],
        "summary": "Delete an Api Scope",
        "operationId": "DeleteApiScope",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Api Scope Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/v1/resources/identityresources/{id}": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "Find an Identity Resource by Id",
        "operationId": "FindIdentityResourceById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identity Resource Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Resources"
        ],
        "summary": "Update an Identity Resource",
        "operationId": "PatchIdentityResource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identity Resource Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request Body",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchIdentityResourceRequest"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchIdentityResourceRequest"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchIdentityResourceRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Resources"
        ],
        "summary": "Delete an Identity Resource",
        "operationId": "DeleteIdentityResource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identity Resource Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/v1/resources/apiresources": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "Get all the Api Resources",
        "operationId": "GetAllApiResourcesAsync",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-Pagination": {
                "$ref": "#/components/schemas/PaginationHeader"
              }
            },
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiResource"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiResource"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiResource"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Resources"
        ],
        "summary": "Create an Api Resource",
        "operationId": "CreateApiResource",
        "requestBody": {
          "description": "Request Body",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateApiResourceRequest"
                  }
                ],
                "description": "The Create Api Resource class models an OpenID Connect or OAuth 2.0 api resource"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateApiResourceRequest"
                  }
                ],
                "description": "The Create Api Resource class models an OpenID Connect or OAuth 2.0 api resource"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateApiResourceRequest"
                  }
                ],
                "description": "The Create Api Resource class models an OpenID Connect or OAuth 2.0 api resource"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/resources/apiscopes": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "Get all the Api Scopes",
        "operationId": "GetAllApiScopesAsync",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-Pagination": {
                "$ref": "#/components/schemas/PaginationHeader"
              }
            },
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiScope"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiScope"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiScope"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Resources"
        ],
        "summary": "Create an Api Scope",
        "operationId": "CreateApiScope",
        "requestBody": {
          "description": "Request Body",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateApiScopeRequest"
                  }
                ],
                "description": "The Create Api Scope class models an OpenID Connect or OAuth 2.0 api scope"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateApiScopeRequest"
                  }
                ],
                "description": "The Create Api Scope class models an OpenID Connect or OAuth 2.0 api scope"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateApiScopeRequest"
                  }
                ],
                "description": "The Create Api Scope class models an OpenID Connect or OAuth 2.0 api scope"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiScope"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiScope"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiScope"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/resources/identityresources": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "Get all the Identity Resources",
        "operationId": "GetAllIdentityResourcesAsync",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-Pagination": {
                "$ref": "#/components/schemas/PaginationHeader"
              }
            },
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityResource"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityResource"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityResource"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Resources"
        ],
        "summary": "Create an Identity Resource",
        "operationId": "CreateIdentityResource",
        "requestBody": {
          "description": "Request Body",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateIdentityResourceRequest"
                  }
                ],
                "description": "The Create Identity Resource class models an OpenID Connect or OAuth 2.0 identity resource"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateIdentityResourceRequest"
                  }
                ],
                "description": "The Create Identity Resource class models an OpenID Connect or OAuth 2.0 identity resource"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateIdentityResourceRequest"
                  }
                ],
                "description": "The Create Identity Resource class models an OpenID Connect or OAuth 2.0 identity resource"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/resources/apiresources/{resourceId}/secrets": {
      "post": {
        "tags": [
          "Resources"
        ],
        "summary": "Create an Api Resource Secret",
        "operationId": "CreateApiResourceSecret",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Resource Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request Body",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateSecretRequest"
                  }
                ],
                "description": "The Create Client Secret class"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateSecretRequest"
                  }
                ],
                "description": "The Create Client Secret class"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateSecretRequest"
                  }
                ],
                "description": "The Create Client Secret class"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Secret"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Secret"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Secret"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tenants": {
      "patch": {
        "tags": [
          "Tenants"
        ],
        "summary": "Patch a Tenant",
        "operationId": "PatchTenant",
        "requestBody": {
          "description": "Request Body",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchTenantRequest"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchTenantRequest"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchTenantRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tenants/current": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Find a Tenant",
        "operationId": "FindCurrentTenant",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/truststore": {
      "get": {
        "tags": [
          "TrustStore"
        ],
        "summary": "Get Truststore",
        "operationId": "GetTrustStore",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TrustStore"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrustStore"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrustStore"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/truststore/certificates": {
      "post": {
        "tags": [
          "TrustStore"
        ],
        "summary": "Add Certificates to truststore",
        "operationId": "AddCertificates",
        "requestBody": {
          "description": "Request Body",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AddTrustStoreCertificatesRequest"
                  }
                ],
                "description": "Add Certificates Request."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AddTrustStoreCertificatesRequest"
                  }
                ],
                "description": "Add Certificates Request."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AddTrustStoreCertificatesRequest"
                  }
                ],
                "description": "Add Certificates Request."
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TrustStore"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrustStore"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrustStore"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/truststore/certificates/{id}": {
      "patch": {
        "tags": [
          "TrustStore"
        ],
        "summary": "Update a Certificate",
        "operationId": "PatchCertificate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Certificate Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request Body",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchTrustStoreCertificateRequest"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchTrustStoreCertificateRequest"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchTrustStoreCertificateRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TrustStoreCertificate"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrustStoreCertificate"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrustStoreCertificate"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TrustStore"
        ],
        "summary": "Delete a Certificate",
        "operationId": "DeleteCertificate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Certificate Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/v1/truststore/revocations": {
      "post": {
        "tags": [
          "TrustStore"
        ],
        "summary": "Add Certificate Revocations to truststore",
        "operationId": "AddCertificateRevocations",
        "requestBody": {
          "description": "Request Body",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AddTrustStoreRevocationsRequest"
                  }
                ],
                "description": "Add Revocations Request."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AddTrustStoreRevocationsRequest"
                  }
                ],
                "description": "Add Revocations Request."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AddTrustStoreRevocationsRequest"
                  }
                ],
                "description": "Add Revocations Request."
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TrustStore"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrustStore"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrustStore"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/truststore/revocations/{id}": {
      "patch": {
        "tags": [
          "TrustStore"
        ],
        "summary": "Update a Certificate Revocation",
        "operationId": "PatchCertificateRevocations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Certificate Revocation Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request Body",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchTrustStoreRevocationRequest"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchTrustStoreRevocationRequest"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchTrustStoreRevocationRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TrustStoreRevocation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrustStoreRevocation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrustStoreRevocation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TrustStore"
        ],
        "summary": "Delete a Certificate Revocation",
        "operationId": "DeleteCertificateRevocation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Certificate Revocation Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/v1/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all the Users",
        "operationId": "GetAllUsersAsync",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-Pagination": {
                "$ref": "#/components/schemas/PaginationHeader"
              }
            },
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSummary"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSummary"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSummary"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a User",
        "operationId": "DeleteUser",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/v1/users/{user_id}/private_data": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update User's Private Data.",
        "operationId": "PatchPrivateData",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request Body",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": { }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": { }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": { }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": { }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": { }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": { }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/public_data": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update User's Public Data.",
        "operationId": "PatchPublicData",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request Body",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": { }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": { }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": { }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": { }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": { }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": { }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccessTokenTypes": {
        "enum": [
          "jwt",
          "reference"
        ],
        "type": "string",
        "description": "* **jwt** - Jwt token\r\n* **reference** - Reference token"
      },
      "AccountProtectionOptions": {
        "required": [
          "user_lockout"
        ],
        "type": "object",
        "properties": {
          "user_lockout": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountProtectionUserLockoutOptions"
              }
            ],
            "description": "Account Protection's User Lockout Options"
          }
        },
        "additionalProperties": false,
        "description": "The Account Protection response class"
      },
      "AccountProtectionUserLockoutOptions": {
        "required": [
          "enabled",
          "ip_lockout_time_span",
          "lockout_type",
          "max_failed_access_attempts",
          "user_lockout_time_span"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Enable User Lockout",
            "example": true
          },
          "max_failed_access_attempts": {
            "type": "integer",
            "description": "Maximum Number of failed attempts a user account can have before the user is locked out. The specified value is inclusive of the count.",
            "format": "int32",
            "example": 5
          },
          "user_lockout_time_span": {
            "type": "integer",
            "description": "Lockout duration in minutes once a user account has been locked out.",
            "format": "int32",
            "example": 5
          },
          "ip_lockout_time_span": {
            "type": "integer",
            "description": "Lockout duration in minutes once an Ip address has been locked out.",
            "format": "int32",
            "example": 43200
          },
          "allowed_ips": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Whitelisted IP Addresses where the Account Protection does not trigger.",
            "nullable": true,
            "example": [
              "156.3.59.5",
              "184.220.154.65"
            ]
          },
          "lockout_type": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserLockoutTypes"
              }
            ],
            "description": "Types of Lockouts to enable per User Account",
            "example": "ip"
          }
        },
        "additionalProperties": false,
        "description": "The Account Protection UserLockout response class"
      },
      "AddTrustStoreCertificatesRequest": {
        "required": [
          "certificates"
        ],
        "type": "object",
        "properties": {
          "certificates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateTrustStoreCertificateRequest"
            },
            "description": "List of certificates."
          }
        },
        "additionalProperties": false,
        "description": "Add Certificates Request."
      },
      "AddTrustStoreRevocationsRequest": {
        "required": [
          "revocations"
        ],
        "type": "object",
        "properties": {
          "revocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateTrustStoreRevocationRequest"
            },
            "description": "List of certificate revocations."
          }
        },
        "additionalProperties": false,
        "description": "Add Revocations Request."
      },
      "ApiResource": {
        "required": [
          "api_secrets",
          "creation_time",
          "enabled",
          "id",
          "last_updated",
          "name",
          "scopes",
          "show_in_discovery_document",
          "user_claims"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the Resource"
          },
          "enabled": {
            "type": "boolean",
            "description": "Specifies if the resource is enabled.",
            "example": true
          },
          "name": {
            "type": "string",
            "description": "The unique name of the resource. This is the value a client will use for the scope parameter in the authorize request.",
            "example": "designation"
          },
          "display_name": {
            "type": "string",
            "description": "Display Name for the Resource",
            "nullable": true,
            "example": "Designation"
          },
          "description": {
            "type": "string",
            "description": "A brief description about the Resource",
            "nullable": true,
            "example": "Current position in the employed organization"
          },
          "show_in_discovery_document": {
            "type": "boolean",
            "description": "Specifies whether this resource is shown in the discovery document.",
            "example": true
          },
          "user_claims": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of associated user claim types that should be included in the Access token.",
            "example": [
              "job_title"
            ]
          },
          "creation_time": {
            "type": "integer",
            "description": "Specifies the creation time of the resource (in Epoch).",
            "format": "int64",
            "example": 1640975400
          },
          "last_updated": {
            "type": "integer",
            "description": "Specifies the last update time of the resource (in Epoch).",
            "format": "int64",
            "example": 1640975400
          },
          "api_secrets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Secret"
            },
            "description": "The Api secret is used for the introspection endpoint. The API can authenticate with introspection using the API name and secret."
          },
          "scopes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of API scope names.",
            "example": [
              "profession"
            ]
          }
        },
        "additionalProperties": false,
        "description": "The Api Resource response class"
      },
      "ApiScope": {
        "required": [
          "creation_time",
          "emphasize",
          "enabled",
          "id",
          "last_updated",
          "name",
          "required",
          "show_in_discovery_document",
          "user_claims"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the Resource"
          },
          "enabled": {
            "type": "boolean",
            "description": "Specifies if the resource is enabled.",
            "example": true
          },
          "name": {
            "type": "string",
            "description": "The unique name of the resource. This is the value a client will use for the scope parameter in the authorize request.",
            "example": "designation"
          },
          "display_name": {
            "type": "string",
            "description": "Display Name for the Resource",
            "nullable": true,
            "example": "Designation"
          },
          "description": {
            "type": "string",
            "description": "A brief description about the Resource",
            "nullable": true,
            "example": "Current position in the employed organization"
          },
          "show_in_discovery_document": {
            "type": "boolean",
            "description": "Specifies whether this resource is shown in the discovery document.",
            "example": true
          },
          "user_claims": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of associated user claim types that should be included in the Access token.",
            "example": [
              "job_title"
            ]
          },
          "creation_time": {
            "type": "integer",
            "description": "Specifies the creation time of the resource (in Epoch).",
            "format": "int64",
            "example": 1640975400
          },
          "last_updated": {
            "type": "integer",
            "description": "Specifies the last update time of the resource (in Epoch).",
            "format": "int64",
            "example": 1640975400
          },
          "required": {
            "type": "boolean",
            "description": "Specifies whether the user can de-select the scope on the consent screen (if such a feature is implemented in the consent screen).",
            "example": false
          },
          "emphasize": {
            "type": "boolean",
            "description": "Specifies whether the consent screen will emphasize this scope (if such a feature is implemented in the consent screen). Use this setting for sensitive or important scopes.",
            "example": false
          }
        },
        "additionalProperties": false,
        "description": "The Api Scope response class"
      },
      "AuthenticationGeneralEmailOptions": {
        "required": [
          "enable_sign_in",
          "required_at_sign_up",
          "show_at_sign_up",
          "verification"
        ],
        "type": "object",
        "properties": {
          "enable_sign_in": {
            "type": "boolean",
            "description": "Specifies if the users are allowed to sign-in using an email",
            "example": true
          },
          "show_at_sign_up": {
            "type": "boolean",
            "description": "Specifies if the users are allowed to enter an email at the time of registration.",
            "example": true
          },
          "required_at_sign_up": {
            "type": "boolean",
            "description": "Specifies if the email is required at the time of registration.",
            "example": true
          },
          "verification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationGeneralEmailVerificationOptions"
              }
            ],
            "description": "Email verification related to Sign Up"
          }
        },
        "additionalProperties": false,
        "description": "The Authentication General Email response class"
      },
      "AuthenticationGeneralEmailVerificationOptions": {
        "required": [
          "code_length",
          "expiration",
          "verify_at_sign_up"
        ],
        "type": "object",
        "properties": {
          "verify_at_sign_up": {
            "type": "boolean",
            "description": "Specifies whether the email should be verified at registration.",
            "example": true
          },
          "expiration": {
            "type": "integer",
            "description": "Email expiration time in seconds.",
            "format": "int32"
          },
          "code_length": {
            "type": "integer",
            "description": "If Email Code is Selected, Code length is chosen from this option",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The Authentication General Email Verification Options Response class"
      },
      "AuthenticationGeneralOptions": {
        "required": [
          "allow_remember_me",
          "consent_required_for_offline_access",
          "email",
          "phone",
          "remember_me_duration",
          "username"
        ],
        "type": "object",
        "properties": {
          "consent_required_for_offline_access": {
            "type": "boolean",
            "description": "Since access tokens have finite lifetimes, refresh tokens allow requesting new access tokens without user interaction. The clients need to be explicitly authorized by the User to request for refresh tokens. This option specifies if all the clients need Consent from the User for Offline Access.",
            "example": true
          },
          "allow_remember_me": {
            "type": "boolean",
            "description": "Show RememberMe Checkbox on the SignIn Screen",
            "example": true
          },
          "remember_me_duration": {
            "type": "integer",
            "description": "RememberMe Duration in minutes",
            "format": "int32",
            "example": 60
          },
          "email": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationGeneralEmailOptions"
              }
            ],
            "description": "General Email Requirement Options for Users"
          },
          "phone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationGeneralPhoneOptions"
              }
            ],
            "description": "General Phone Requirement Options for Users"
          },
          "username": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationGeneralUsernameOptions"
              }
            ],
            "description": "General Username Requirement Options for Users"
          }
        },
        "additionalProperties": false,
        "description": "The Authentication General Options response class"
      },
      "AuthenticationGeneralPhoneOptions": {
        "required": [
          "enable_sign_in",
          "required_at_sign_up",
          "show_at_sign_up",
          "verification"
        ],
        "type": "object",
        "properties": {
          "enable_sign_in": {
            "type": "boolean",
            "description": "Specifies if the users are allowed to sign-in using a phone number",
            "example": true
          },
          "show_at_sign_up": {
            "type": "boolean",
            "description": "Specifies if the users are allowed to enter a phone number at the time of registration.",
            "example": true
          },
          "required_at_sign_up": {
            "type": "boolean",
            "description": "Specifies if the phone number is required at the time of registration.",
            "example": true
          },
          "verification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationGeneralPhoneVerificationOptions"
              }
            ],
            "description": "Sms verification related to Sign Up"
          }
        },
        "additionalProperties": false,
        "description": "The Authentication General Phone response class"
      },
      "AuthenticationGeneralPhoneVerificationOptions": {
        "required": [
          "code_length",
          "expiration",
          "verify_at_sign_up"
        ],
        "type": "object",
        "properties": {
          "verify_at_sign_up": {
            "type": "boolean",
            "description": "Specifies whether the phone should be verified at registration.",
            "example": true
          },
          "expiration": {
            "type": "integer",
            "description": "Sms verification expiration time in seconds.",
            "format": "int32"
          },
          "code_length": {
            "type": "integer",
            "description": "Sms Code length is chosen from this option",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The Authentication General Phone Verification Options Response class"
      },
      "AuthenticationGeneralUsernameOptions": {
        "required": [
          "enable_sign_in",
          "minimum_length",
          "required_at_sign_up",
          "show_at_sign_up"
        ],
        "type": "object",
        "properties": {
          "enable_sign_in": {
            "type": "boolean",
            "description": "Specifies if the users are allowed to sign-in using a username",
            "example": true
          },
          "show_at_sign_up": {
            "type": "boolean",
            "description": "Specifies if the users are allowed to enter a username at the time of registration.",
            "example": true
          },
          "required_at_sign_up": {
            "type": "boolean",
            "description": "Specifies if the username is required at the time of registration.",
            "example": true
          },
          "minimum_length": {
            "type": "integer",
            "description": "Specifies the minimum length required for the username.",
            "format": "int32",
            "example": 3
          }
        },
        "additionalProperties": false,
        "description": "The Authentication General Username response class"
      },
      "AuthenticationMethodEmailCodeOptions": {
        "required": [
          "enable_jit_provisioning",
          "enable_sign_in",
          "enable_sign_up",
          "otp_expiry",
          "otp_length"
        ],
        "type": "object",
        "properties": {
          "enable_sign_in": {
            "type": "boolean",
            "description": "Enable Email Code Sign-in",
            "example": true
          },
          "enable_sign_up": {
            "type": "boolean",
            "description": "Enable Email Code Sign-up",
            "example": true
          },
          "enable_jit_provisioning": {
            "type": "boolean",
            "description": "Enable Email Code Enable Jit Provisioning",
            "example": true
          },
          "otp_expiry": {
            "type": "integer",
            "description": "Specifies the expiration time in seconds for the OTP to be generated",
            "format": "int32",
            "example": 30
          },
          "otp_length": {
            "type": "integer",
            "description": "Specifies the OTP character length",
            "format": "int32",
            "example": 6
          }
        },
        "additionalProperties": false,
        "description": "The Authentication Method Email Code response class"
      },
      "AuthenticationMethodMagicLinkOptions": {
        "required": [
          "enable_jit_provisioning",
          "enable_sign_in",
          "enable_sign_up",
          "link_expiry"
        ],
        "type": "object",
        "properties": {
          "enable_sign_in": {
            "type": "boolean",
            "description": "Enable Magic Link Sign-in",
            "example": true
          },
          "enable_sign_up": {
            "type": "boolean",
            "description": "Enable Magic Link Sign-up",
            "example": true
          },
          "enable_jit_provisioning": {
            "type": "boolean",
            "description": "Enable Magic Link Enable Jit Provisioning",
            "example": true
          },
          "link_expiry": {
            "type": "integer",
            "description": "Specifies the expiration time in seconds for the OTP to be generated",
            "format": "int32",
            "example": 30
          }
        },
        "additionalProperties": false,
        "description": "The Authentication Method Magic Link response class"
      },
      "AuthenticationMethodOptions": {
        "required": [
          "email_code",
          "magic_link",
          "password",
          "sms_code"
        ],
        "type": "object",
        "properties": {
          "password": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationMethodPasswordOptions"
              }
            ],
            "description": "Password Authentication Method Settings"
          },
          "sms_code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationMethodSmsCodeOptions"
              }
            ],
            "description": "Sms Code Authentication Method Settings"
          },
          "magic_link": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationMethodMagicLinkOptions"
              }
            ],
            "description": "Magic Link Authentication Method Settings"
          },
          "email_code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationMethodEmailCodeOptions"
              }
            ],
            "description": "Email Code Authentication Method Settings"
          }
        },
        "additionalProperties": false,
        "description": "The Authentication Method response class"
      },
      "AuthenticationMethodPasswordExpirationOptions": {
        "required": [
          "enabled",
          "expiration_period"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Specifies the expiration mode.",
            "example": false
          },
          "expiration_period": {
            "type": "integer",
            "description": "Specifies the password expiration period in minutes.",
            "format": "int32",
            "example": 43200
          }
        },
        "additionalProperties": false,
        "description": "The Authentication Method Password Expiration response class"
      },
      "AuthenticationMethodPasswordOptions": {
        "required": [
          "enable_sign_in",
          "enable_sign_up",
          "expiration",
          "recovery",
          "reuse",
          "strength"
        ],
        "type": "object",
        "properties": {
          "enable_sign_in": {
            "type": "boolean",
            "description": "Enable Password Sign-in",
            "example": true
          },
          "enable_sign_up": {
            "type": "boolean",
            "description": "Enable Password Sign-up",
            "example": true
          },
          "strength": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationMethodPasswordStrengthOptions"
              }
            ],
            "description": "Password Strength Options"
          },
          "reuse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationMethodPasswordReuseOptions"
              }
            ],
            "description": "Password Re-use Options"
          },
          "expiration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationMethodPasswordExpirationOptions"
              }
            ],
            "description": "Password Expiration Options"
          },
          "recovery": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationMethodPasswordRecoveryOptions"
              }
            ],
            "description": "Password Recovery Options"
          }
        },
        "additionalProperties": false,
        "description": "The Authentication Method Password Options response class"
      },
      "AuthenticationMethodPasswordRecoveryEmailOptions": {
        "required": [
          "enabled",
          "mode",
          "otp_expiry",
          "otp_length"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Enable Password recovery through Email."
          },
          "mode": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/TokenSendTypes"
              }
            ],
            "description": "Specifies the recovery mode.",
            "example": "code"
          },
          "otp_expiry": {
            "type": "integer",
            "description": "Email expiration time in seconds.",
            "format": "int32",
            "example": 300
          },
          "otp_length": {
            "type": "integer",
            "description": "If Email Code is Selected, Code length is chosen from this option",
            "format": "int32",
            "example": 6
          }
        },
        "additionalProperties": false,
        "description": "The Authentication Method Password Recovery Email response class"
      },
      "AuthenticationMethodPasswordRecoveryOptions": {
        "required": [
          "email",
          "phone"
        ],
        "type": "object",
        "properties": {
          "email": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationMethodPasswordRecoveryEmailOptions"
              }
            ],
            "description": "Password Recovery Email Options"
          },
          "phone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationMethodPasswordRecoveryPhoneOptions"
              }
            ],
            "description": "Password Recovery Phone Options"
          }
        },
        "additionalProperties": false,
        "description": "The Authentication Method Password Recovery response class"
      },
      "AuthenticationMethodPasswordRecoveryPhoneOptions": {
        "required": [
          "enabled",
          "otp_expiry",
          "otp_length"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Enable Password recovery through Phone."
          },
          "otp_expiry": {
            "type": "integer",
            "description": "Code expiration time in seconds.",
            "format": "int32",
            "example": 300
          },
          "otp_length": {
            "type": "integer",
            "description": "Code length is chosen from this option",
            "format": "int32",
            "example": 6
          }
        },
        "additionalProperties": false,
        "description": "The Authentication Method Password Recovery Phone response class"
      },
      "AuthenticationMethodPasswordReuseOptions": {
        "required": [
          "restriction_count",
          "restriction_mode",
          "restriction_period"
        ],
        "type": "object",
        "properties": {
          "restriction_mode": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/PasswordRestrictionModes"
              }
            ],
            "description": "Specifies if there should be any restriction for password reuse.",
            "example": "off"
          },
          "restriction_period": {
            "type": "integer",
            "description": "Specifies the time in minutes in which the password cannot be reused.",
            "format": "int32",
            "example": 43200
          },
          "restriction_count": {
            "type": "integer",
            "description": "Specifies the number of previous passwords which cannot be reused.",
            "format": "int32",
            "example": 5
          }
        },
        "additionalProperties": false,
        "description": "The Authentication Method Password Reuse response class"
      },
      "AuthenticationMethodPasswordStrengthOptions": {
        "required": [
          "minimum_length",
          "require_digit",
          "require_lowercase_character",
          "require_non_alphanumeric_character",
          "require_uppercase_character",
          "required_unique_characters_count"
        ],
        "type": "object",
        "properties": {
          "minimum_length": {
            "type": "integer",
            "description": "Specifies the minimum character length of password",
            "format": "int32",
            "example": 16
          },
          "require_non_alphanumeric_character": {
            "type": "boolean",
            "description": "Specifies the whether a non alphanumeric character is required in the password.",
            "example": true
          },
          "require_digit": {
            "type": "boolean",
            "description": "Specifies the whether a digit is required in the password.",
            "example": true
          },
          "require_lowercase_character": {
            "type": "boolean",
            "description": "Specifies the whether a lowercase character is required in the password.",
            "example": true
          },
          "require_uppercase_character": {
            "type": "boolean",
            "description": "Specifies the whether a uppercase character is required in the password.",
            "example": true
          },
          "required_unique_characters_count": {
            "type": "integer",
            "description": "Specifies the number of unique characters required in the password.",
            "format": "int32",
            "example": 4
          }
        },
        "additionalProperties": false,
        "description": "The Authentication Method Password Strength response class"
      },
      "AuthenticationMethodSmsCodeOptions": {
        "required": [
          "enable_jit_provisioning",
          "enable_sign_in",
          "enable_sign_up",
          "otp_expiry",
          "otp_length"
        ],
        "type": "object",
        "properties": {
          "enable_sign_in": {
            "type": "boolean",
            "description": "Enable Sms Code Sign-in",
            "example": true
          },
          "enable_sign_up": {
            "type": "boolean",
            "description": "Enable Sms Code Sign-up",
            "example": true
          },
          "enable_jit_provisioning": {
            "type": "boolean",
            "description": "Enable Sms Code Enable Jit Provisioning",
            "example": true
          },
          "otp_expiry": {
            "type": "integer",
            "description": "Specifies the expiration time in seconds for the OTP to be generated",
            "format": "int32",
            "example": 30
          },
          "otp_length": {
            "type": "integer",
            "description": "Specifies the OTP character length",
            "format": "int32",
            "example": 6
          }
        },
        "additionalProperties": false,
        "description": "The Authentication Method Sms Code response class"
      },
      "AuthenticationMethods": {
        "enum": [
          "password",
          "sms_code",
          "magic_link",
          "email_code"
        ],
        "type": "string",
        "description": "* **password**\r\n* **sms_code**\r\n* **magic_link**\r\n* **email_code**"
      },
      "AuthenticationOptions": {
        "required": [
          "account_protection",
          "authentication_methods",
          "external_providers",
          "general",
          "logout",
          "sign_up"
        ],
        "type": "object",
        "properties": {
          "account_protection": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountProtectionOptions"
              }
            ],
            "description": "Account Protection Options"
          },
          "authentication_methods": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationMethodOptions"
              }
            ],
            "description": "Authentication Method Options"
          },
          "external_providers": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalProviderOptions"
              }
            ],
            "description": "External Provider Options"
          },
          "general": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationGeneralOptions"
              }
            ],
            "description": "Authentication General Options"
          },
          "logout": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LogoutOptions"
              }
            ],
            "description": "Logout Options"
          },
          "sign_up": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SignUpOptions"
              }
            ],
            "description": "Sign-up Options"
          }
        },
        "additionalProperties": false,
        "description": "The Authentication Options response class"
      },
      "BrandingEmailOptions": {
        "type": "object",
        "properties": {
          "magic_link_sign_in": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrandingGenericEmailTemplateOptions"
              }
            ],
            "description": "Magic Link SignIn Branding Options",
            "nullable": true
          },
          "email_code_sign_in": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrandingGenericEmailTemplateOptions"
              }
            ],
            "description": "Email Code SignIn Branding Options",
            "nullable": true
          },
          "email_code_verification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrandingGenericEmailTemplateOptions"
              }
            ],
            "description": "Email Code Verification Branding Options",
            "nullable": true
          },
          "welcome": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrandingGenericEmailTemplateOptions"
              }
            ],
            "description": "Welcome Email Branding Options",
            "nullable": true
          },
          "user_lockout": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrandingGenericEmailTemplateOptions"
              }
            ],
            "description": "User Lockout Branding Options",
            "nullable": true
          },
          "magic_link_password_reset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrandingGenericEmailTemplateOptions"
              }
            ],
            "description": "Magic Link Password Reset Branding Options",
            "nullable": true
          },
          "email_code_password_reset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrandingGenericEmailTemplateOptions"
              }
            ],
            "description": "Email Code Password Reset Branding Options",
            "nullable": true
          },
          "password_updated": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrandingGenericEmailTemplateOptions"
              }
            ],
            "description": "Password Updated Branding Options",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The Branding Email Options response class"
      },
      "BrandingGenericEmailTemplateOptions": {
        "type": "object",
        "properties": {
          "from_email": {
            "type": "string",
            "description": "From Email Address",
            "nullable": true,
            "example": "support@acme.com"
          },
          "from_name": {
            "type": "string",
            "description": "From Name",
            "nullable": true,
            "example": "Acme Support"
          },
          "subject": {
            "type": "string",
            "description": "Specifies the text to be used as the email subject",
            "nullable": true,
            "example": "Welcome to ACME"
          },
          "template_uri": {
            "type": "string",
            "description": "Specifies the URI for the custom template to be used",
            "nullable": true,
            "example": "https://example.com/templates"
          }
        },
        "additionalProperties": false,
        "description": "The Branding Email Generic Template Options response class"
      },
      "BrandingGenericSmsTemplateOptions": {
        "required": [
          "template"
        ],
        "type": "object",
        "properties": {
          "template": {
            "type": "string",
            "description": "Custom LiquidJS template for the SMS",
            "example": "Hi {{ name }}"
          }
        },
        "additionalProperties": false,
        "description": "The Branding Generic Sms Template Options response class"
      },
      "BrandingOptions": {
        "required": [
          "email",
          "page",
          "project",
          "sms"
        ],
        "type": "object",
        "properties": {
          "email": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrandingEmailOptions"
              }
            ],
            "description": "Email Branding Options"
          },
          "sms": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrandingSmsOptions"
              }
            ],
            "description": "Sms Branding Options"
          },
          "page": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrandingPageOptions"
              }
            ],
            "description": "Page Branding Options"
          },
          "project": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrandingProjectOptions"
              }
            ],
            "description": "Project Branding Options"
          }
        },
        "additionalProperties": false,
        "description": "The Branding Options response class"
      },
      "BrandingPageOptions": {
        "required": [
          "background",
          "error_color",
          "primary_color",
          "sign_in"
        ],
        "type": "object",
        "properties": {
          "background": {
            "type": "string",
            "description": "Specifies the background css string to be used for pages",
            "example": "#f2f2f2"
          },
          "error_color": {
            "type": "string",
            "description": "Specifies the error colour to be used for pages",
            "example": "#f2f2f2"
          },
          "favicon_uri": {
            "type": "string",
            "description": "Specifies Uri used for the favicon",
            "nullable": true,
            "example": "https://example.com/favicon"
          },
          "logo_uri": {
            "type": "string",
            "description": "Specifies Uri used for the logo",
            "nullable": true,
            "example": "https://example.com/logo"
          },
          "primary_color": {
            "type": "string",
            "description": "Specifies the primary colour to be used for pages",
            "example": "#f2f2f2"
          },
          "sign_in": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrandingSignInPageOptions"
              }
            ],
            "description": "Sign In Page Branding Options"
          }
        },
        "additionalProperties": false,
        "description": "The Branding Page Options response class"
      },
      "BrandingProjectOptions": {
        "type": "object",
        "properties": {
          "default_url": {
            "type": "string",
            "description": "Project Url",
            "nullable": true,
            "example": "https://acme.com"
          },
          "privacy_url": {
            "type": "string",
            "description": "Privacy Url",
            "nullable": true,
            "example": "https://acme.com/privacy"
          },
          "support_url": {
            "type": "string",
            "description": "Support Url",
            "nullable": true,
            "example": "https://acme.com/support"
          },
          "support_email": {
            "type": "string",
            "description": "Support Email",
            "nullable": true,
            "example": "support@acme.com"
          },
          "terms_url": {
            "type": "string",
            "description": "Terms Url",
            "nullable": true,
            "example": "https://acme.com/terms"
          }
        },
        "additionalProperties": false,
        "description": "The Branding Project Options response class"
      },
      "BrandingSignInPageOptions": {
        "required": [
          "external_sign_in_methods_first",
          "external_sign_in_methods_order",
          "prompt_password_on_initial_screen"
        ],
        "type": "object",
        "properties": {
          "prompt_password_on_initial_screen": {
            "type": "boolean",
            "description": "If enabled password will be prompted on the same screen as the username.",
            "example": false
          },
          "external_sign_in_methods_first": {
            "type": "boolean",
            "description": "If enabled, External SigIn Methods are shown on top and the Primary SigIn method is shown on bottom.",
            "example": true
          },
          "external_sign_in_methods_order": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "enum",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ExternalIDPs"
                }
              ]
            },
            "description": "Order of the External SigIn methods buttons",
            "example": [
              "google",
              "apple"
            ]
          }
        },
        "additionalProperties": false,
        "description": "The Branding SignIn Page Options response class"
      },
      "BrandingSmsOptions": {
        "type": "object",
        "properties": {
          "sms_code_sign_in": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrandingGenericSmsTemplateOptions"
              }
            ],
            "description": "Sms Code SignIn Branding Options",
            "nullable": true
          },
          "sms_code_verification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrandingGenericSmsTemplateOptions"
              }
            ],
            "description": "Sms Code Verification Branding Options",
            "nullable": true
          },
          "sms_code_password_reset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrandingGenericSmsTemplateOptions"
              }
            ],
            "description": "Sms Code Password Reset Branding Options",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The Branding Sms Options response class"
      },
      "CertificateTypes": {
        "enum": [
          "chained",
          "self_signed",
          "all"
        ],
        "type": "string",
        "description": "* **chained** - Verifies the certificate with root CA and intermediary CAs\r\n* **self_signed** - Verifies the self-signed certificate in the store against the certificate presented by the user\r\n* **all** - Verifies both self-signed and chained certificates"
      },
      "Claim": {
        "required": [
          "type",
          "value",
          "value_type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Specifies the type of the claim",
            "example": "customer_id"
          },
          "value": {
            "type": "string",
            "description": "Specifies the value of the claim",
            "example": "CUST01234"
          },
          "value_type": {
            "type": "string",
            "description": "Specifies the type of the claim value",
            "example": "http://www.w3.org/2001/XMLSchema#string"
          }
        },
        "additionalProperties": false,
        "description": "The Claim response class"
      },
      "Client": {
        "required": [
          "absolute_refresh_token_lifetime",
          "access_token_lifetime",
          "access_token_type",
          "allow_access_tokens_via_browser",
          "allow_offline_access",
          "allow_plain_text_pkce",
          "allowed_cors_origins",
          "allowed_grant_types",
          "allowed_scopes",
          "always_include_user_claims_in_id_token",
          "always_send_client_claims",
          "authentication_method_restrictions",
          "authorization_code_lifetime",
          "back_channel_logout_session_required",
          "claims",
          "client_name",
          "creation_time",
          "device_code_lifetime",
          "enable_local_login",
          "enabled",
          "front_channel_logout_session_required",
          "id",
          "identity_provider_restrictions",
          "identity_token_lifetime",
          "include_jwt_id",
          "last_updated",
          "post_logout_redirect_uris",
          "redirect_uris",
          "refresh_token_expiration",
          "refresh_token_usage",
          "remember_consent",
          "require_client_secret",
          "require_consent",
          "require_pkce",
          "require_request_object",
          "secrets",
          "show_consent_scope_selection",
          "sliding_refresh_token_lifetime",
          "update_access_token_claims_on_refresh",
          "user_code_type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the client"
          },
          "enabled": {
            "type": "boolean",
            "description": "Specifies if client is enabled.",
            "example": true
          },
          "secrets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Secret"
            },
            "description": "List of Client secrets (only relevant for flows that require a secret)"
          },
          "require_client_secret": {
            "type": "boolean",
            "description": "If set to false, no client secret is needed to request tokens at the token endpoint"
          },
          "client_name": {
            "type": "string",
            "description": "The name of the client",
            "example": "Accounting Dashboard"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the client.",
            "nullable": true,
            "example": "Deals with the preparation of financial statements, maintenance of general ledger, and more."
          },
          "client_uri": {
            "type": "string",
            "description": "URI for providing further information about client",
            "nullable": true,
            "example": "https://www.organization/accounting"
          },
          "logo_uri": {
            "type": "string",
            "description": "URI to client logo",
            "nullable": true,
            "example": "https://www.organization/accounting_logo.png"
          },
          "require_consent": {
            "type": "boolean",
            "description": "Specifies whether a consent screen is required to be shown"
          },
          "remember_consent": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/RememberConsentTypes"
              }
            ],
            "description": "Specifies whether user can choose to store consent decisions"
          },
          "show_consent_scope_selection": {
            "type": "boolean",
            "description": "Specifies whether or not the user is allowed to select the scopes on the consent screen"
          },
          "always_include_user_claims_in_id_token": {
            "type": "boolean",
            "description": "When requesting both an id token and access token, should the user claims always be added to the id token instead of requiring the client to use the userinfo endpoint."
          },
          "allowed_grant_types": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "enum",
              "allOf": [
                {
                  "$ref": "#/components/schemas/GrantTypes"
                }
              ]
            },
            "description": "Specifies the allowed grant types (legal combinations is required).",
            "example": [
              "hybrid",
              "device_code"
            ]
          },
          "require_pkce": {
            "type": "boolean",
            "description": "Specifies whether a proof key is required for authorization code based token requests"
          },
          "allow_plain_text_pkce": {
            "type": "boolean",
            "description": "Specifies whether a proof key can be sent using plain method (not recommended to be set to `true`)"
          },
          "require_request_object": {
            "type": "boolean",
            "description": "Specifies whether this client needs to wrap the authorize request parameters in a JWT"
          },
          "allow_access_tokens_via_browser": {
            "type": "boolean",
            "description": "Controls whether access tokens are transmitted via the browser for this client. This can prevent accidental leakage of access tokens when multiple response types are allowed."
          },
          "redirect_uris": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specifies allowed URIs to return tokens or authorization codes to",
            "example": [
              "https://www.organization/accounting/redirect1",
              "https://www.organization/hr/redirect"
            ]
          },
          "post_logout_redirect_uris": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specifies allowed URIs to redirect to after logout",
            "example": [
              "https://www.organization/accounting/loggedout",
              "https://www.organization/hr/loggedout"
            ]
          },
          "front_channel_logout_uri": {
            "type": "string",
            "description": "Specifies logout URI at client for HTTP front-channel based logout.",
            "nullable": true,
            "example": "https://www.organization/accounting/frontLogout"
          },
          "front_channel_logout_session_required": {
            "type": "boolean",
            "description": "Specifies if the user's session id should be sent to the FrontChannelLogoutUri"
          },
          "back_channel_logout_uri": {
            "type": "string",
            "description": "Specifies logout URI at client for HTTP back-channel based logout.",
            "nullable": true,
            "example": "https://www.organization/accounting/backLogout"
          },
          "back_channel_logout_session_required": {
            "type": "boolean",
            "description": "Specifies if the user's session id should be sent to the BackChannelLogoutUri"
          },
          "allow_offline_access": {
            "type": "boolean",
            "description": "Specifies whether the client can request refresh tokens (by requesting the offline_access scope)"
          },
          "allowed_scopes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specifies the scopes the client is allowed to access (by default a client has no access to any resources)",
            "example": [
              "openid",
              "profile",
              "email"
            ]
          },
          "identity_token_lifetime": {
            "type": "integer",
            "description": "Lifetime of identity token in seconds",
            "format": "int32",
            "example": 300
          },
          "access_token_lifetime": {
            "type": "integer",
            "description": "Lifetime of access token in seconds",
            "format": "int32",
            "example": 3600
          },
          "authorization_code_lifetime": {
            "type": "integer",
            "description": "Lifetime of authorization code in seconds",
            "format": "int32",
            "example": 300
          },
          "consent_lifetime": {
            "type": "integer",
            "description": "Lifetime of a user consent in seconds",
            "format": "int32",
            "nullable": true,
            "example": 604800
          },
          "absolute_refresh_token_lifetime": {
            "type": "integer",
            "description": "Maximum lifetime of a refresh token in seconds",
            "format": "int32",
            "example": 2592000
          },
          "sliding_refresh_token_lifetime": {
            "type": "integer",
            "description": "Sliding lifetime of a refresh token in seconds",
            "format": "int32",
            "example": 1296000
          },
          "refresh_token_usage": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/RefreshTokenUsageTypes"
              }
            ],
            "description": "Specified the validity of a refresh token"
          },
          "update_access_token_claims_on_refresh": {
            "type": "boolean",
            "description": "Specifies a value indicating whether the access token (and its claims) should be updated on a refresh token request"
          },
          "refresh_token_expiration": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/RefreshTokenExpirationTypes"
              }
            ],
            "description": "Specifies how the refresh token expires"
          },
          "access_token_type": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccessTokenTypes"
              }
            ],
            "description": "Specifies whether the access token is a reference token or a self contained JWT token."
          },
          "enable_local_login": {
            "type": "boolean",
            "description": "Specifies whether the local login (Username / Password) is allowed for this client."
          },
          "identity_provider_restrictions": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "enum",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IDPs"
                }
              ]
            },
            "description": "Specifies which authentication providers can be used with this client (if list is empty all providers are allowed)",
            "example": [
              "local",
              "google"
            ]
          },
          "authentication_method_restrictions": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "enum",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AuthenticationMethods"
                }
              ]
            },
            "description": "Specifies which authentication methods can be used with this client (if list is empty all methods are allowed)",
            "example": [
              "local",
              "password"
            ]
          },
          "include_jwt_id": {
            "type": "boolean",
            "description": "Specifies whether JWT access tokens should include an identifier"
          },
          "claims": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Claim"
            },
            "description": "Allows settings claims for the client (will be included in the access token)."
          },
          "always_send_client_claims": {
            "type": "boolean",
            "description": "Specifies whether client claims should be always included in the access tokens - or only for client credentials flow."
          },
          "client_claims_prefix": {
            "type": "string",
            "description": "If set, the client claim will be prefixed with this value",
            "nullable": true
          },
          "allowed_cors_origins": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The allowed CORS origins for JavaScript clients.",
            "example": [
              "https://accounting.organization",
              "https://hr.organization"
            ]
          },
          "user_sso_lifetime": {
            "type": "integer",
            "description": "The maximum duration (in seconds) since the last time the user authenticated. You can adjust the lifetime of a session token to control when and how often a user is required to reenter credentials instead of being silently authenticated, when using a web application.",
            "format": "int32",
            "nullable": true,
            "example": 604800
          },
          "user_code_type": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/DeviceFlowCodeTypes"
              }
            ],
            "description": "Specifies the type of code that will be generated for the device code flow"
          },
          "device_code_lifetime": {
            "type": "integer",
            "description": "Specifies the device code lifetime.",
            "format": "int32",
            "example": 180
          },
          "creation_time": {
            "type": "integer",
            "description": "Specifies the creation time of the client (in Epoch).",
            "format": "int64",
            "example": 1640975400
          },
          "last_updated": {
            "type": "integer",
            "description": "Specifies the last update time of the client (in Epoch).",
            "format": "int64",
            "example": 1640975400
          }
        },
        "additionalProperties": false,
        "description": "The Client response class"
      },
      "CommunicationEmailOptions": {
        "required": [
          "use_internal_keys"
        ],
        "type": "object",
        "properties": {
          "send_grid": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CommunicationEmailSendGridOptions"
              }
            ],
            "description": "SendGrid Email Options",
            "nullable": true
          },
          "use_internal_keys": {
            "type": "boolean",
            "description": "Use the the internal keys to send Emails",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "The Communication Email Options response class"
      },
      "CommunicationEmailSendGridOptions": {
        "required": [
          "api_key"
        ],
        "type": "object",
        "properties": {
          "api_key": {
            "type": "string",
            "description": "SendGrid Api Key",
            "example": "KJFdlswierur458dfhkJHFwkoepOURFuasd"
          }
        },
        "additionalProperties": false,
        "description": "The Communicaiton Email SendGrid Options response class"
      },
      "CommunicationOptions": {
        "required": [
          "email",
          "sms"
        ],
        "type": "object",
        "properties": {
          "email": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CommunicationEmailOptions"
              }
            ],
            "description": "Email - Communication Options"
          },
          "sms": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CommunicationSmsOptions"
              }
            ],
            "description": "Sms - Communication Options"
          }
        },
        "additionalProperties": false,
        "description": "The Communication Options response class"
      },
      "CommunicationSmsOptions": {
        "required": [
          "use_internal_keys"
        ],
        "type": "object",
        "properties": {
          "twilio": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CommunicationSmsTwilioOptions"
              }
            ],
            "description": "Twilio Options",
            "nullable": true
          },
          "use_internal_keys": {
            "type": "boolean",
            "description": "Use the the internal keys to send Sms",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "The Communication Sms Options response class"
      },
      "CommunicationSmsTwilioOptions": {
        "required": [
          "auth_token",
          "sid"
        ],
        "type": "object",
        "properties": {
          "sid": {
            "type": "string",
            "description": "Twilio SID",
            "example": "lakshGHIur984573"
          },
          "auth_token": {
            "type": "string",
            "description": "Twilio Auth Token",
            "example": "867dsfujgFTe6724356tgfds"
          },
          "messaging_sid": {
            "type": "string",
            "description": "Twilio Messaging SID",
            "nullable": true,
            "example": "867dsfujgFTe6724356tgfds"
          },
          "from": {
            "type": "string",
            "description": "Twilio From",
            "nullable": true,
            "example": "ACME"
          }
        },
        "additionalProperties": false,
        "description": "The Communication Sms Twilio Options response class"
      },
      "CreateApiResourceRequest": {
        "required": [
          "api_secrets",
          "enabled",
          "name",
          "scopes",
          "show_in_discovery_document",
          "user_claims"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Specifies if the resource is enabled.",
            "default": true,
            "example": true
          },
          "name": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "The unique name of the resource. This is the value a client will use for the scope parameter in the authorize request.",
            "example": "designation"
          },
          "display_name": {
            "type": "string",
            "description": "Display Name for the Resource",
            "nullable": true,
            "example": "Designation"
          },
          "description": {
            "type": "string",
            "description": "A brief description about the Resource",
            "nullable": true,
            "example": "Current position in the employed organization"
          },
          "show_in_discovery_document": {
            "type": "boolean",
            "description": "Specifies whether this resource is shown in the discovery document.",
            "default": true,
            "example": true
          },
          "user_claims": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-z0-9]+([a-z0-9-_.]+[a-z0-9])?$",
              "type": "string"
            },
            "description": "List of associated user claim types that should be included in the Access token.",
            "example": [
              "job_title"
            ]
          },
          "api_secrets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateSecretRequest"
            },
            "description": "The Api secret is used for the introspection endpoint. The API can authenticate with introspection using the API name and secret."
          },
          "scopes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "maxLength": 50,
              "minLength": 1,
              "pattern": "^[a-z0-9]+([a-z0-9-._]+[a-z0-9])?$",
              "type": "string"
            },
            "description": "List of API scope names.",
            "example": [
              "profession"
            ]
          }
        },
        "additionalProperties": false,
        "description": "The Create Api Resource class models an OpenID Connect or OAuth 2.0 api resource"
      },
      "CreateApiScopeRequest": {
        "required": [
          "emphasize",
          "enabled",
          "name",
          "required",
          "show_in_discovery_document",
          "user_claims"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Specifies if the resource is enabled.",
            "default": true,
            "example": true
          },
          "name": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "The unique name of the resource. This is the value a client will use for the scope parameter in the authorize request.",
            "example": "designation"
          },
          "display_name": {
            "type": "string",
            "description": "Display Name for the Resource",
            "nullable": true,
            "example": "Designation"
          },
          "description": {
            "type": "string",
            "description": "A brief description about the Resource",
            "nullable": true,
            "example": "Current position in the employed organization"
          },
          "show_in_discovery_document": {
            "type": "boolean",
            "description": "Specifies whether this resource is shown in the discovery document.",
            "default": true,
            "example": true
          },
          "user_claims": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-z0-9]+([a-z0-9-_.]+[a-z0-9])?$",
              "type": "string"
            },
            "description": "List of associated user claim types that should be included in the Access token.",
            "example": [
              "job_title"
            ]
          },
          "required": {
            "type": "boolean",
            "description": "Specifies whether the user can de-select the scope on the consent screen (if such a feature is implemented in the consent screen).",
            "default": false,
            "example": false
          },
          "emphasize": {
            "type": "boolean",
            "description": "Specifies whether the consent screen will emphasize this scope (if such a feature is implemented in the consent screen). Use this setting for sensitive or important scopes.",
            "default": false,
            "example": false
          }
        },
        "additionalProperties": false,
        "description": "The Create Api Scope class models an OpenID Connect or OAuth 2.0 api scope"
      },
      "CreateClaimRequest": {
        "required": [
          "type",
          "value",
          "value_type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "maxLength": 100,
            "minLength": 1,
            "pattern": "^[a-z0-9]+([a-z0-9-_.]+[a-z0-9])?$",
            "type": "string",
            "description": "Specifies the type of the claim",
            "example": "customer_id"
          },
          "value": {
            "maxLength": 1000,
            "minLength": 1,
            "type": "string",
            "description": "Specifies the value of the claim",
            "example": "CUST01234"
          },
          "value_type": {
            "type": "string",
            "description": "Specifies the type of the claim value",
            "default": "http://www.w3.org/2001/XMLSchema#string",
            "example": "http://www.w3.org/2001/XMLSchema#string"
          }
        },
        "additionalProperties": false,
        "description": "The Create Claim class"
      },
      "CreateClientRequest": {
        "required": [
          "absolute_refresh_token_lifetime",
          "access_token_lifetime",
          "access_token_type",
          "allow_access_tokens_via_browser",
          "allow_offline_access",
          "allow_plain_text_pkce",
          "allowed_cors_origins",
          "allowed_grant_types",
          "allowed_scopes",
          "always_include_user_claims_in_id_token",
          "always_send_client_claims",
          "authentication_method_restrictions",
          "authorization_code_lifetime",
          "back_channel_logout_session_required",
          "claims",
          "client_name",
          "device_code_lifetime",
          "enable_local_login",
          "enabled",
          "front_channel_logout_session_required",
          "identity_provider_restrictions",
          "identity_token_lifetime",
          "include_jwt_id",
          "post_logout_redirect_uris",
          "redirect_uris",
          "refresh_token_expiration",
          "refresh_token_usage",
          "remember_consent",
          "require_client_secret",
          "require_consent",
          "require_pkce",
          "require_request_object",
          "secrets",
          "show_consent_scope_selection",
          "sliding_refresh_token_lifetime",
          "update_access_token_claims_on_refresh",
          "user_code_type"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Specifies if client is enabled.",
            "default": true,
            "example": true
          },
          "secrets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateSecretRequest"
            },
            "description": "List of Client secrets (only relevant for flows that require a secret)"
          },
          "require_client_secret": {
            "type": "boolean",
            "description": "If set to false, no client secret is needed to request tokens at the token endpoint",
            "default": true
          },
          "client_name": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "The name of the client",
            "example": "Accounting Dashboard"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the client.",
            "nullable": true,
            "example": "Deals with the preparation of financial statements, maintenance of general ledger, and more."
          },
          "client_uri": {
            "type": "string",
            "description": "URI for providing further information about client",
            "nullable": true,
            "example": "https://www.organization/accounting"
          },
          "logo_uri": {
            "type": "string",
            "description": "URI to client logo",
            "nullable": true,
            "example": "https://www.organization/accounting_logo.png"
          },
          "require_consent": {
            "type": "boolean",
            "description": "Specifies whether a consent screen is required to be shown",
            "default": false
          },
          "remember_consent": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/RememberConsentTypes"
              }
            ],
            "description": "Specifies whether user can choose to store consent decisions",
            "default": "user_selected"
          },
          "show_consent_scope_selection": {
            "type": "boolean",
            "description": "Specifies whether or not the user is allowed to select the scopes on the consent screen",
            "default": true
          },
          "always_include_user_claims_in_id_token": {
            "type": "boolean",
            "description": "When requesting both an id token and access token, should the user claims always be added to the id token instead of requiring the client to use the userinfo endpoint.",
            "default": false
          },
          "allowed_grant_types": {
            "minItems": 1,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "enum",
              "allOf": [
                {
                  "$ref": "#/components/schemas/GrantTypes"
                }
              ]
            },
            "description": "Specifies the allowed grant types (legal combinations is required).",
            "example": [
              "hybrid",
              "device_code"
            ]
          },
          "require_pkce": {
            "type": "boolean",
            "description": "Specifies whether a proof key is required for authorization code based token requests",
            "default": true
          },
          "allow_plain_text_pkce": {
            "type": "boolean",
            "description": "Specifies whether a proof key can be sent using plain method (not recommended to be set to `true`)",
            "default": false
          },
          "require_request_object": {
            "type": "boolean",
            "description": "Specifies whether this client needs to wrap the authorize request parameters in a JWT",
            "default": false
          },
          "allow_access_tokens_via_browser": {
            "type": "boolean",
            "description": "Controls whether access tokens are transmitted via the browser for this client. This can prevent accidental leakage of access tokens when multiple response types are allowed.",
            "default": false
          },
          "redirect_uris": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "maxLength": 400,
              "minLength": 1,
              "type": "string"
            },
            "description": "Specifies allowed URIs to return tokens or authorization codes to",
            "example": [
              "https://www.organization/accounting/redirect1",
              "https://www.organization/hr/redirect"
            ]
          },
          "post_logout_redirect_uris": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "maxLength": 400,
              "minLength": 1,
              "type": "string"
            },
            "description": "Specifies allowed URIs to redirect to after logout",
            "example": [
              "https://www.organization/accounting/loggedout",
              "https://www.organization/hr/loggedout"
            ]
          },
          "front_channel_logout_uri": {
            "type": "string",
            "description": "Specifies logout URI at client for HTTP front-channel based logout.",
            "nullable": true,
            "example": "https://www.organization/accounting/frontLogout"
          },
          "front_channel_logout_session_required": {
            "type": "boolean",
            "description": "Specifies if the user's session id should be sent to the FrontChannelLogoutUri",
            "default": true
          },
          "back_channel_logout_uri": {
            "type": "string",
            "description": "Specifies logout URI at client for HTTP back-channel based logout.",
            "nullable": true,
            "example": "https://www.organization/accounting/backLogout"
          },
          "back_channel_logout_session_required": {
            "type": "boolean",
            "description": "Specifies if the user's session id should be sent to the BackChannelLogoutUri",
            "default": true
          },
          "allow_offline_access": {
            "type": "boolean",
            "description": "Specifies whether the client can request refresh tokens (by requesting the offline_access scope)",
            "default": false
          },
          "allowed_scopes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "maxLength": 50,
              "minLength": 1,
              "pattern": "^[a-z0-9]+([a-z0-9-._]+[a-z0-9])?$",
              "type": "string"
            },
            "description": "Specifies the scopes the client is allowed to access (by default a client has no access to any resources)",
            "example": [
              "openid",
              "profile",
              "email"
            ]
          },
          "identity_token_lifetime": {
            "maximum": 2592000,
            "minimum": 1,
            "type": "integer",
            "description": "Lifetime of identity token in seconds",
            "format": "int32",
            "default": 300,
            "example": 300
          },
          "access_token_lifetime": {
            "maximum": 2592000,
            "minimum": 1,
            "type": "integer",
            "description": "Lifetime of access token in seconds",
            "format": "int32",
            "default": 3600,
            "example": 3600
          },
          "authorization_code_lifetime": {
            "maximum": 600,
            "minimum": 1,
            "type": "integer",
            "description": "Lifetime of authorization code in seconds",
            "format": "int32",
            "default": 300,
            "example": 300
          },
          "consent_lifetime": {
            "maximum": 2592000,
            "minimum": 1,
            "type": "integer",
            "description": "Lifetime of a user consent in seconds",
            "format": "int32",
            "nullable": true,
            "example": 604800
          },
          "absolute_refresh_token_lifetime": {
            "maximum": 2592000,
            "minimum": 1,
            "type": "integer",
            "description": "Maximum lifetime of a refresh token in seconds",
            "format": "int32",
            "default": 2592000,
            "example": 2592000
          },
          "sliding_refresh_token_lifetime": {
            "maximum": 2592000,
            "minimum": 1,
            "type": "integer",
            "description": "Sliding lifetime of a refresh token in seconds",
            "format": "int32",
            "default": 1296000,
            "example": 1296000
          },
          "refresh_token_usage": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/RefreshTokenUsageTypes"
              }
            ],
            "description": "Specified the validity of a refresh token",
            "default": "one_time_only"
          },
          "update_access_token_claims_on_refresh": {
            "type": "boolean",
            "description": "Specifies a value indicating whether the access token (and its claims) should be updated on a refresh token request",
            "default": false
          },
          "refresh_token_expiration": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/RefreshTokenExpirationTypes"
              }
            ],
            "description": "Specifies how the refresh token expires",
            "default": "absolute"
          },
          "access_token_type": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccessTokenTypes"
              }
            ],
            "description": "Specifies whether the access token is a reference token or a self contained JWT token.",
            "default": "jwt"
          },
          "enable_local_login": {
            "type": "boolean",
            "description": "Specifies whether the local login (Username / Password) is allowed for this client.",
            "default": true
          },
          "identity_provider_restrictions": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "enum",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IDPs"
                }
              ]
            },
            "description": "Specifies which authentication providers can be used with this client (if list is empty all providers are allowed)",
            "example": [
              "local",
              "google"
            ]
          },
          "authentication_method_restrictions": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "enum",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AuthenticationMethods"
                }
              ]
            },
            "description": "Specifies which authentication methods can be used with this client (if list is empty all methods are allowed)",
            "example": [
              "local",
              "password"
            ]
          },
          "include_jwt_id": {
            "type": "boolean",
            "description": "Specifies whether JWT access tokens should include an identifier",
            "default": true
          },
          "claims": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateClaimRequest"
            },
            "description": "Allows settings claims for the client (will be included in the access token)."
          },
          "always_send_client_claims": {
            "type": "boolean",
            "description": "Specifies whether client claims should be always included in the access tokens - or only for client credentials flow.",
            "default": false
          },
          "client_claims_prefix": {
            "type": "string",
            "description": "If set, the client claim will be prefixed with this value",
            "default": "client_",
            "nullable": true
          },
          "allowed_cors_origins": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            },
            "description": "The allowed CORS origins for JavaScript clients.",
            "example": [
              "https://accounting.organization",
              "https://hr.organization"
            ]
          },
          "user_sso_lifetime": {
            "maximum": 2592000,
            "minimum": 1,
            "type": "integer",
            "description": "The maximum duration (in seconds) since the last time the user authenticated. You can adjust the lifetime of a session token to control when and how often a user is required to reenter credentials instead of being silently authenticated, when using a web application.",
            "format": "int32",
            "nullable": true,
            "example": 604800
          },
          "user_code_type": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/DeviceFlowCodeTypes"
              }
            ],
            "description": "Specifies the type of code that will be generated for the device code flow",
            "default": "numeric"
          },
          "device_code_lifetime": {
            "maximum": 3600,
            "minimum": 1,
            "type": "integer",
            "description": "Specifies the device code lifetime.",
            "format": "int32",
            "default": 300,
            "example": 180
          }
        },
        "additionalProperties": false,
        "description": "The Create Client class models an OpenID Connect or OAuth 2.0 client - e.g. a native application, a web application or a JS-based application."
      },
      "CreateIdentityResourceRequest": {
        "required": [
          "emphasize",
          "enabled",
          "name",
          "required",
          "show_in_discovery_document",
          "user_claims"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Specifies if the resource is enabled.",
            "default": true,
            "example": true
          },
          "name": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "The unique name of the resource. This is the value a client will use for the scope parameter in the authorize request.",
            "example": "designation"
          },
          "display_name": {
            "type": "string",
            "description": "Display Name for the Resource",
            "nullable": true,
            "example": "Designation"
          },
          "description": {
            "type": "string",
            "description": "A brief description about the Resource",
            "nullable": true,
            "example": "Current position in the employed organization"
          },
          "show_in_discovery_document": {
            "type": "boolean",
            "description": "Specifies whether this resource is shown in the discovery document.",
            "default": true,
            "example": true
          },
          "user_claims": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-z0-9]+([a-z0-9-_.]+[a-z0-9])?$",
              "type": "string"
            },
            "description": "List of associated user claim types that should be included in the Access token.",
            "example": [
              "job_title"
            ]
          },
          "required": {
            "type": "boolean",
            "description": "Specifies whether the user can de-select the scope on the consent screen (if such a feature is implemented in the consent screen).",
            "default": false,
            "example": false
          },
          "emphasize": {
            "type": "boolean",
            "description": "Specifies whether the consent screen will emphasize this scope (if such a feature is implemented in the consent screen). Use this setting for sensitive or important scopes.",
            "default": false,
            "example": false
          }
        },
        "additionalProperties": false,
        "description": "The Create Identity Resource class models an OpenID Connect or OAuth 2.0 identity resource"
      },
      "CreateSecretRequest": {
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Brief description of the secret",
            "nullable": true,
            "example": "Banking App Client Secret"
          },
          "value": {
            "minLength": 1,
            "type": "string",
            "description": "The secret",
            "example": "d2980ac62d2e58d316728dba55ce"
          },
          "expiration": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer",
            "description": "The expiration date of the secret (in Epoch)",
            "format": "int64",
            "nullable": true,
            "example": 1640975400
          },
          "type": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/SecretTypes"
              }
            ],
            "description": "Specifies type of secret",
            "default": "shared_secret"
          }
        },
        "additionalProperties": false,
        "description": "The Create Client Secret class"
      },
      "CreateSignUpCustomFieldOptionsRequest": {
        "required": [
          "claim_name",
          "enabled",
          "label",
          "required",
          "value_type"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Specifies if the users are allowed to enter the claim at the time of signup.",
            "example": true
          },
          "required": {
            "type": "boolean",
            "description": "Specifies if the claim is required at the time of signup.",
            "example": false
          },
          "claim_name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Specifies the name for the claim.",
            "example": "first_name"
          },
          "value_type": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/ValueTypes"
              }
            ],
            "description": "Specifies the claim value type.",
            "example": "string"
          },
          "label": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Specifies the label to be used for the claim at the time of signup.",
            "example": "First Name"
          }
        },
        "additionalProperties": false,
        "description": "The Create Sign Up Custom Field Options Request class"
      },
      "CreateTrustStoreCertificateRequest": {
        "required": [
          "enabled",
          "value"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Specifies if the certificate is enabled.",
            "example": true
          },
          "value": {
            "maxLength": 5000,
            "minLength": 1,
            "type": "string",
            "description": "Certificate Value.",
            "example": "certificate_value"
          }
        },
        "additionalProperties": false,
        "description": "Create Certificate Request."
      },
      "CreateTrustStoreRevocationRequest": {
        "required": [
          "enabled",
          "value"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Specifies if the certificate is enabled.",
            "example": true
          },
          "value": {
            "maxLength": 5000,
            "minLength": 1,
            "type": "string",
            "description": "Certificate Crl Value.",
            "example": "certificate_revocation_value"
          }
        },
        "additionalProperties": false,
        "description": "Create Revocation Request."
      },
      "DeviceFlowCodeTypes": {
        "enum": [
          "numeric"
        ],
        "type": "string",
        "description": "* **numeric**"
      },
      "DeviceFlowOptions": {
        "required": [
          "code_length"
        ],
        "type": "object",
        "properties": {
          "code_length": {
            "type": "integer",
            "description": "Device Flow Code Length",
            "format": "int32",
            "example": 4
          }
        },
        "additionalProperties": false,
        "description": "The Device Flow Options response class"
      },
      "ExternalIDPs": {
        "enum": [
          "google",
          "apple",
          "facebook"
        ],
        "type": "string",
        "description": "* **google**\r\n* **apple**\r\n* **facebook**"
      },
      "ExternalProviderAppleOptions": {
        "required": [
          "client_id",
          "client_secret",
          "enable_sign_in",
          "enable_sign_up",
          "key_id",
          "save_tokens",
          "sync_user_profile_always",
          "team_id",
          "trust_email_verified_scope"
        ],
        "type": "object",
        "properties": {
          "enable_sign_in": {
            "type": "boolean",
            "description": "Enable External Provider Sign-in",
            "example": true
          },
          "enable_sign_up": {
            "type": "boolean",
            "description": "Enable External Provider Sign-up",
            "example": true
          },
          "sync_user_profile_always": {
            "type": "boolean",
            "description": "If set to true, will sync the profile with each login",
            "example": true
          },
          "save_tokens": {
            "type": "boolean",
            "description": "Specifies whether the tokens issued by the the provider be saved",
            "example": true
          },
          "client_id": {
            "type": "string",
            "description": "Client Id issued for the customer by provider",
            "example": "Lkidgf845hKHrfwehf_jgf"
          },
          "client_secret": {
            "type": "string",
            "description": "Client Secret issued for the customer by provider",
            "example": "JJfgi4597fs9hkmkdfrk_jfhh4uuNBFl"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of provider scopes to be obtained",
            "nullable": true,
            "example": [
              "profile",
              "email",
              "phonenumber"
            ]
          },
          "trust_email_verified_scope": {
            "type": "boolean",
            "description": "Specifies if we should trust the email verified scope received from the external provider.",
            "example": false
          },
          "team_id": {
            "type": "string",
            "description": "Apple generated teamId",
            "example": "kjGD8745hasd"
          },
          "key_id": {
            "type": "string",
            "description": "Apple generated keyId",
            "example": "kjGD8745hasd"
          }
        },
        "additionalProperties": false,
        "description": "The Apple Provider Options response class"
      },
      "ExternalProviderFacebookOptions": {
        "required": [
          "client_id",
          "client_secret",
          "enable_sign_in",
          "enable_sign_up",
          "save_tokens",
          "sync_user_profile_always",
          "trust_email_verified_scope"
        ],
        "type": "object",
        "properties": {
          "enable_sign_in": {
            "type": "boolean",
            "description": "Enable External Provider Sign-in",
            "example": true
          },
          "enable_sign_up": {
            "type": "boolean",
            "description": "Enable External Provider Sign-up",
            "example": true
          },
          "sync_user_profile_always": {
            "type": "boolean",
            "description": "If set to true, will sync the profile with each login",
            "example": true
          },
          "save_tokens": {
            "type": "boolean",
            "description": "Specifies whether the tokens issued by the the provider be saved",
            "example": true
          },
          "client_id": {
            "type": "string",
            "description": "Client Id issued for the customer by provider",
            "example": "Lkidgf845hKHrfwehf_jgf"
          },
          "client_secret": {
            "type": "string",
            "description": "Client Secret issued for the customer by provider",
            "example": "JJfgi4597fs9hkmkdfrk_jfhh4uuNBFl"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of provider scopes to be obtained",
            "nullable": true,
            "example": [
              "profile",
              "email",
              "phonenumber"
            ]
          },
          "trust_email_verified_scope": {
            "type": "boolean",
            "description": "Specifies if we should trust the email verified scope received from the external provider.",
            "example": false
          },
          "fields": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Required claims from facebook",
            "nullable": true,
            "example": [
              "email",
              "firstname"
            ]
          }
        },
        "additionalProperties": false,
        "description": "The Facebook Provider Options response class"
      },
      "ExternalProviderGoogleOptions": {
        "required": [
          "client_id",
          "client_secret",
          "enable_sign_in",
          "enable_sign_up",
          "save_tokens",
          "sync_user_profile_always",
          "trust_email_verified_scope"
        ],
        "type": "object",
        "properties": {
          "enable_sign_in": {
            "type": "boolean",
            "description": "Enable External Provider Sign-in",
            "example": true
          },
          "enable_sign_up": {
            "type": "boolean",
            "description": "Enable External Provider Sign-up",
            "example": true
          },
          "sync_user_profile_always": {
            "type": "boolean",
            "description": "If set to true, will sync the profile with each login",
            "example": true
          },
          "save_tokens": {
            "type": "boolean",
            "description": "Specifies whether the tokens issued by the the provider be saved",
            "example": true
          },
          "client_id": {
            "type": "string",
            "description": "Client Id issued for the customer by provider",
            "example": "Lkidgf845hKHrfwehf_jgf"
          },
          "client_secret": {
            "type": "string",
            "description": "Client Secret issued for the customer by provider",
            "example": "JJfgi4597fs9hkmkdfrk_jfhh4uuNBFl"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of provider scopes to be obtained",
            "nullable": true,
            "example": [
              "profile",
              "email",
              "phonenumber"
            ]
          },
          "trust_email_verified_scope": {
            "type": "boolean",
            "description": "Specifies if we should trust the email verified scope received from the external provider.",
            "example": false
          }
        },
        "additionalProperties": false,
        "description": "The Google Provider Options response class"
      },
      "ExternalProviderOptions": {
        "type": "object",
        "properties": {
          "google": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalProviderGoogleOptions"
              }
            ],
            "description": "Google's ID Provider settings",
            "nullable": true
          },
          "apple": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalProviderAppleOptions"
              }
            ],
            "description": "Apple's ID Provider Settings",
            "nullable": true
          },
          "facebook": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalProviderFacebookOptions"
              }
            ],
            "description": "Facebook's Provider Settings",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The External Provider Options response class"
      },
      "GrantTypes": {
        "enum": [
          "implicit",
          "hybrid",
          "authorization_code",
          "client_credentials",
          "password",
          "device_code"
        ],
        "type": "string",
        "description": "* **implicit**\r\n* **hybrid**\r\n* **authorization_code**\r\n* **client_credentials**\r\n* **password**\r\n* **device_code**"
      },
      "IDPs": {
        "enum": [
          "mono_cloud",
          "google",
          "apple",
          "facebook"
        ],
        "type": "string",
        "description": "* **mono_cloud**\r\n* **google**\r\n* **apple**\r\n* **facebook**"
      },
      "IdentityResource": {
        "required": [
          "creation_time",
          "emphasize",
          "enabled",
          "id",
          "is_default",
          "last_updated",
          "name",
          "required",
          "show_in_discovery_document",
          "user_claims"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the Resource"
          },
          "enabled": {
            "type": "boolean",
            "description": "Specifies if the resource is enabled.",
            "example": true
          },
          "name": {
            "type": "string",
            "description": "The unique name of the resource. This is the value a client will use for the scope parameter in the authorize request.",
            "example": "designation"
          },
          "display_name": {
            "type": "string",
            "description": "Display Name for the Resource",
            "nullable": true,
            "example": "Designation"
          },
          "description": {
            "type": "string",
            "description": "A brief description about the Resource",
            "nullable": true,
            "example": "Current position in the employed organization"
          },
          "show_in_discovery_document": {
            "type": "boolean",
            "description": "Specifies whether this resource is shown in the discovery document.",
            "example": true
          },
          "user_claims": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of associated user claim types that should be included in the Access token.",
            "example": [
              "job_title"
            ]
          },
          "creation_time": {
            "type": "integer",
            "description": "Specifies the creation time of the resource (in Epoch).",
            "format": "int64",
            "example": 1640975400
          },
          "last_updated": {
            "type": "integer",
            "description": "Specifies the last update time of the resource (in Epoch).",
            "format": "int64",
            "example": 1640975400
          },
          "required": {
            "type": "boolean",
            "description": "Specifies whether the user can de-select the scope on the consent screen (if such a feature is implemented in the consent screen).",
            "example": false
          },
          "emphasize": {
            "type": "boolean",
            "description": "Specifies whether the consent screen will emphasize this scope (if such a feature is implemented in the consent screen). Use this setting for sensitive or important scopes.",
            "example": false
          },
          "is_default": {
            "type": "boolean",
            "description": "Specifies whether it's a built-in identity resource.",
            "readOnly": true,
            "example": false
          }
        },
        "additionalProperties": false,
        "description": "The Identity Resource response class"
      },
      "KeyMaterial": {
        "required": [
          "creation_time",
          "id",
          "is_current",
          "is_system_generated",
          "key_type",
          "original_use",
          "signing_algorithm",
          "use",
          "valid_from"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the key."
          },
          "signing_algorithm": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/SigningAlgorithms"
              }
            ],
            "description": "Specifies the type of algorithm used for signing.",
            "example": "rs256"
          },
          "is_current": {
            "type": "boolean",
            "description": "Specifies whether the key is current default."
          },
          "is_system_generated": {
            "type": "boolean",
            "description": "Specifies whether the key is system generated or not.",
            "example": true
          },
          "use": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/KeyMaterialUses"
              }
            ],
            "description": "Specifies the current use of the key.",
            "example": "signing"
          },
          "original_use": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/KeyMaterialUses"
              }
            ],
            "description": "Specifies the use for which the key was created.",
            "example": "signing"
          },
          "key_type": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/KeyMaterialTypes"
              }
            ],
            "description": "Specifies the type of key.",
            "example": "jwk"
          },
          "creation_time": {
            "type": "integer",
            "description": "Specifies the creation time of the key (in Epoch).",
            "format": "int64",
            "example": 1640975400
          },
          "valid_from": {
            "type": "integer",
            "description": "Specifies the time ( in Epoch ) from which the key is valid.",
            "format": "int64",
            "example": 1640975400
          },
          "valid_to": {
            "type": "integer",
            "description": "Specifies the time ( in Epoch ) upto which the key is valid.",
            "format": "int64",
            "nullable": true,
            "example": 1640975400
          },
          "revocation_date": {
            "type": "integer",
            "description": "Specifies the revocation time of the key ( in Epoch ).",
            "format": "int64",
            "nullable": true,
            "example": 1640975400
          },
          "rotation_date": {
            "type": "integer",
            "description": "Specifies the time ( in Epoch ) at which the key was rotated.",
            "format": "int64",
            "nullable": true,
            "example": 1640975400
          }
        },
        "additionalProperties": false,
        "description": "The KeyMaterial Response class"
      },
      "KeyMaterialTypes": {
        "enum": [
          "x509",
          "jwk",
          "ecdsa",
          "rsa"
        ],
        "type": "string",
        "description": "Specifies the type of the key\r\n* **x509**\r\n* **jwk**\r\n* **ecdsa**\r\n* **rsa**"
      },
      "KeyMaterialUses": {
        "enum": [
          "signing",
          "validation"
        ],
        "type": "string",
        "description": "Specifies the purpose / use of the key\r\n* **signing** - The key can be used for signing new tokens.\r\n* **validation** - The key can be used for validating the tokens."
      },
      "Languages": {
        "enum": [
          "english_us"
        ],
        "type": "string",
        "description": "* **english_us**"
      },
      "Log": {
        "required": [
          "category",
          "event_id",
          "event_type",
          "id",
          "interactive",
          "name",
          "region",
          "tenant_id",
          "time_stamp"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the log",
            "example": "83658f0a-e366-41d1-8228-b0874dd36d0c"
          },
          "category": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/LogEventCategories"
              }
            ],
            "description": "Log Category",
            "example": "token"
          },
          "name": {
            "type": "string",
            "description": "Log Name.",
            "example": "Authorization Success"
          },
          "event_type": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/LogEventTypes"
              }
            ],
            "description": "Log Type.",
            "example": "success"
          },
          "event_id": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/LogEventIds"
              }
            ],
            "description": "Log event Id.",
            "example": "authorization_success"
          },
          "message": {
            "type": "string",
            "description": "Message",
            "nullable": true,
            "example": "Authorization Success"
          },
          "activity_id": {
            "type": "string",
            "description": "The Activity Id.",
            "nullable": true,
            "example": "0HMNB2DAIS5OI:00000002"
          },
          "time_stamp": {
            "type": "integer",
            "description": "Specifies the event time (in Epoch).",
            "format": "int64",
            "example": 1672479766
          },
          "process_id": {
            "type": "integer",
            "description": "The Process Id.",
            "format": "int32",
            "nullable": true,
            "example": 13052
          },
          "local_ip_address": {
            "type": "string",
            "description": "The Local Ip Address.",
            "nullable": true,
            "example": "127.0.0.1"
          },
          "remote_ip_address": {
            "type": "string",
            "description": "The Remote Ip Address.",
            "nullable": true,
            "example": "172.18.0.1"
          },
          "user_agent": {
            "type": "string",
            "description": "The User Agent.",
            "nullable": true,
            "example": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36"
          },
          "tenant_id": {
            "type": "string",
            "description": "The tenant Id.",
            "format": "uuid",
            "example": "dfa6f854-4ee3-4585-bdd0-650d4efb80ab"
          },
          "region": {
            "type": "integer",
            "description": "The region.",
            "format": "int32",
            "example": 0
          },
          "interactive": {
            "type": "boolean",
            "description": "Specifies if the log was triggered by a user interactive process.",
            "example": true
          },
          "client_id": {
            "type": "string",
            "description": "The client Id.",
            "nullable": true,
            "example": "client_id"
          },
          "client_name": {
            "type": "string",
            "description": "The Client Name.",
            "nullable": true,
            "example": "client_name"
          }
        },
        "additionalProperties": false,
        "description": "The Log Summary response class."
      },
      "LogEventCategories": {
        "enum": [
          "authentication",
          "token",
          "grants",
          "error",
          "device",
          "notifications"
        ],
        "type": "string",
        "description": "* **authentication**\r\n* **token**\r\n* **grants**\r\n* **error**\r\n* **device**\r\n* **notifications**"
      },
      "LogEventIds": {
        "enum": [
          "authorization_success",
          "authorization_failure",
          "resource_owner_authentication_success",
          "resource_owner_authentication_failure",
          "client_authentication_success",
          "client_authentication_failure",
          "api_authentication_success",
          "api_authentication_failure",
          "user_logout_success",
          "user_sign_in_failure",
          "user_sign_in_success",
          "user_account_blocked",
          "user_account_ip_blocked",
          "user_account_unblocked",
          "user_account_ip_unblocked",
          "user_account_ip_unblocked_all",
          "user_password_reset_success",
          "user_session_created",
          "user_session_renewed",
          "user_session_removed",
          "user_sign_up_success",
          "user_new_authentication_method_added",
          "token_issued_success",
          "token_issued_failure",
          "token_revoked_success",
          "token_introspection_success",
          "token_introspection_failure",
          "unhandled_exception",
          "invalid_client_configuration",
          "consent_granted",
          "consent_denied",
          "grants_revoked",
          "device_authorization_success",
          "device_authorization_failure",
          "passwordless_sign_in_notification_sent_event",
          "sign_up_verification_notification_sent_event",
          "user_password_reset_notification_sent"
        ],
        "type": "string",
        "description": "* **authorization_success**\r\n* **authorization_failure**\r\n* **resource_owner_authentication_success**\r\n* **resource_owner_authentication_failure**\r\n* **client_authentication_success**\r\n* **client_authentication_failure**\r\n* **api_authentication_success**\r\n* **api_authentication_failure**\r\n* **user_logout_success**\r\n* **user_sign_in_failure**\r\n* **user_sign_in_success**\r\n* **user_account_blocked**\r\n* **user_account_ip_blocked**\r\n* **user_account_unblocked**\r\n* **user_account_ip_unblocked**\r\n* **user_account_ip_unblocked_all**\r\n* **user_password_reset_success**\r\n* **user_session_created**\r\n* **user_session_renewed**\r\n* **user_session_removed**\r\n* **user_sign_up_success**\r\n* **user_new_authentication_method_added**\r\n* **token_issued_success**\r\n* **token_issued_failure**\r\n* **token_revoked_success**\r\n* **token_introspection_success**\r\n* **token_introspection_failure**\r\n* **unhandled_exception**\r\n* **invalid_client_configuration**\r\n* **consent_granted**\r\n* **consent_denied**\r\n* **grants_revoked**\r\n* **device_authorization_success**\r\n* **device_authorization_failure**\r\n* **passwordless_sign_in_notification_sent_event**\r\n* **sign_up_verification_notification_sent_event**\r\n* **user_password_reset_notification_sent**"
      },
      "LogEventTypes": {
        "enum": [
          "success",
          "failure",
          "information",
          "error"
        ],
        "type": "string",
        "description": "* **success**\r\n* **failure**\r\n* **information**\r\n* **error**"
      },
      "LogSummary": {
        "required": [
          "category",
          "event_id",
          "event_type",
          "id",
          "interactive",
          "name",
          "region",
          "tenant_id",
          "time_stamp"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the log",
            "example": "83658f0a-e366-41d1-8228-b0874dd36d0c"
          },
          "category": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/LogEventCategories"
              }
            ],
            "description": "Log Category",
            "example": "token"
          },
          "name": {
            "type": "string",
            "description": "Log Name.",
            "example": "Authorization Success"
          },
          "event_type": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/LogEventTypes"
              }
            ],
            "description": "Log Type.",
            "example": "success"
          },
          "event_id": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/LogEventIds"
              }
            ],
            "description": "Log event Id.",
            "example": "authorization_success"
          },
          "time_stamp": {
            "type": "integer",
            "description": "Specifies the event time (in Epoch).",
            "format": "int64",
            "example": 1672479766
          },
          "tenant_id": {
            "type": "string",
            "description": "The tenant Id.",
            "format": "uuid",
            "example": "dfa6f854-4ee3-4585-bdd0-650d4efb80ab"
          },
          "region": {
            "type": "integer",
            "description": "The region.",
            "format": "int32",
            "example": 0
          },
          "interactive": {
            "type": "boolean",
            "description": "Specifies if the log was triggered by a user interactive process.",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "The Log Summary response class"
      },
      "LogoutOptions": {
        "required": [
          "automatic_redirect_after_logout",
          "show_logout_prompt"
        ],
        "type": "object",
        "properties": {
          "automatic_redirect_after_logout": {
            "type": "boolean",
            "description": "Specifies whether the user should be automatically redirected to the client specified URL after sign out.",
            "example": true
          },
          "show_logout_prompt": {
            "type": "boolean",
            "description": "Specifies whether there should be a prompt before log out.",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "The Logout Options response class"
      },
      "Microsoft.AspNetCore.Mvc.ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "MtlsOptions": {
        "required": [
          "allowed_certificate_types",
          "enabled",
          "revocation_mode",
          "validate_certificate_use",
          "validate_validity_period"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Enable MTLS",
            "example": true
          },
          "allowed_certificate_types": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/CertificateTypes"
              }
            ],
            "description": "Specifies the permitted certificate types.",
            "example": "all"
          },
          "validate_certificate_use": {
            "type": "boolean",
            "description": "If set to true, will validates whether the certificate is intended for authentication",
            "example": true
          },
          "validate_validity_period": {
            "type": "boolean",
            "description": "If set to true, will verify the certificate's validity period",
            "example": true
          },
          "revocation_mode": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/X509RevocationMode"
              }
            ],
            "description": "Specifies the type of revocation check."
          }
        },
        "additionalProperties": false,
        "description": "The Mtls Options response class"
      },
      "PaginationHeader": {
        "required": [
          "current_page",
          "has_next",
          "has_previous",
          "page_size",
          "total_count"
        ],
        "type": "object",
        "properties": {
          "page_size": {
            "type": "integer",
            "description": "Page Size",
            "format": "int32",
            "example": 10
          },
          "current_page": {
            "type": "integer",
            "description": "Current Page",
            "format": "int32",
            "example": 1
          },
          "total_count": {
            "type": "integer",
            "description": "Total Number of Items",
            "format": "int32",
            "example": 25
          },
          "has_previous": {
            "type": "boolean",
            "description": "Specfies whether there is a previous page",
            "example": false
          },
          "has_next": {
            "type": "boolean",
            "description": "Specfies whether there is a next page",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "The Pagination Header response class"
      },
      "PasswordRestrictionModes": {
        "enum": [
          "off",
          "date",
          "count",
          "date_and_count"
        ],
        "type": "string",
        "description": "* **off**\r\n* **date**\r\n* **count**\r\n* **date_and_count**"
      },
      "PatchAccountProtectionOptionsRequest": {
        "type": "object",
        "properties": {
          "user_lockout": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchAccountProtectionUserLockoutOptionsRequest"
              }
            ],
            "description": "Account Protection's User Lockout Options"
          }
        },
        "additionalProperties": false,
        "description": "The Patch Account Protection Options Request class"
      },
      "PatchAccountProtectionUserLockoutOptionsRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Enable User Lockout",
            "example": true
          },
          "max_failed_access_attempts": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Maximum Number of failed attempts a user account can have before the user is locked out. The specified value is inclusive of the count.",
            "format": "int32",
            "example": 5
          },
          "user_lockout_time_span": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Lockout duration in minutes once a user account has been locked out.",
            "format": "int32",
            "example": 5
          },
          "ip_lockout_time_span": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Lockout duration in minutes once an Ip address has been locked out.",
            "format": "int32",
            "example": 43200
          },
          "allowed_ips": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "maxLength": 15,
              "minLength": 1,
              "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
              "type": "string"
            },
            "description": "Whitelisted IP Addresses where the Account Protection does not trigger.",
            "nullable": true,
            "example": [
              "156.3.59.5",
              "184.220.154.65"
            ]
          },
          "lockout_type": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserLockoutTypes"
              }
            ],
            "description": "Types of Lockouts to enable per User Account",
            "example": "ip"
          }
        },
        "additionalProperties": false,
        "description": "The Patch Account Protection User Lockout Options Request class"
      },
      "PatchApiResourceRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Specifies if the resource is enabled.",
            "example": true
          },
          "name": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "The unique name of the resource. This is the value a client will use for the scope parameter in the authorize request.",
            "example": "designation"
          },
          "display_name": {
            "type": "string",
            "description": "Display Name for the Resource",
            "nullable": true,
            "example": "Designation"
          },
          "description": {
            "type": "string",
            "description": "A brief description about the Resource",
            "nullable": true,
            "example": "Current position in the employed organization"
          },
          "show_in_discovery_document": {
            "type": "boolean",
            "description": "Specifies whether this resource is shown in the discovery document.",
            "example": true
          },
          "user_claims": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-z0-9]+([a-z0-9-_.]+[a-z0-9])?$",
              "type": "string"
            },
            "description": "List of associated user claim types that should be included in the Access token.",
            "example": [
              "job_title"
            ]
          },
          "scopes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "maxLength": 50,
              "minLength": 1,
              "pattern": "^[a-z0-9]+([a-z0-9-._]+[a-z0-9])?$",
              "type": "string"
            },
            "description": "List of API scope names.",
            "example": [
              "profession"
            ]
          }
        },
        "additionalProperties": false,
        "description": "The Patch Api Resource class"
      },
      "PatchApiScopeRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Specifies if the resource is enabled.",
            "example": true
          },
          "name": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "The unique name of the resource. This is the value a client will use for the scope parameter in the authorize request.",
            "example": "designation"
          },
          "display_name": {
            "type": "string",
            "description": "Display Name for the Resource",
            "nullable": true,
            "example": "Designation"
          },
          "description": {
            "type": "string",
            "description": "A brief description about the Resource",
            "nullable": true,
            "example": "Current position in the employed organization"
          },
          "show_in_discovery_document": {
            "type": "boolean",
            "description": "Specifies whether this resource is shown in the discovery document.",
            "example": true
          },
          "user_claims": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-z0-9]+([a-z0-9-_.]+[a-z0-9])?$",
              "type": "string"
            },
            "description": "List of associated user claim types that should be included in the Access token.",
            "example": [
              "job_title"
            ]
          },
          "required": {
            "type": "boolean",
            "description": "Specifies whether the user can de-select the scope on the consent screen (if such a feature is implemented in the consent screen).",
            "example": false
          },
          "emphasize": {
            "type": "boolean",
            "description": "Specifies whether the consent screen will emphasize this scope (if such a feature is implemented in the consent screen). Use this setting for sensitive or important scopes.",
            "example": false
          }
        },
        "additionalProperties": false,
        "description": "The Patch Api Scope class"
      },
      "PatchAuthenticationGeneralEmailOptionsRequest": {
        "type": "object",
        "properties": {
          "enable_sign_in": {
            "type": "boolean",
            "description": "Specifies if the users are allowed to sign-in using an email",
            "example": true
          },
          "show_at_sign_up": {
            "type": "boolean",
            "description": "Specifies if the users are allowed to enter an email at the time of registration.",
            "example": true
          },
          "required_at_sign_up": {
            "type": "boolean",
            "description": "Specifies if the email is required at the time of registration.",
            "example": true
          },
          "verification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchAuthenticationGeneralEmailVerificationOptionsRequest"
              }
            ],
            "description": "Email verification related to Sign Up"
          }
        },
        "additionalProperties": false,
        "description": "The Patch General Email Authentication Options Request class"
      },
      "PatchAuthenticationGeneralEmailVerificationOptionsRequest": {
        "type": "object",
        "properties": {
          "verify_at_sign_up": {
            "type": "boolean",
            "description": "Specifies whether the email should be verified at registration.",
            "example": true
          },
          "expiration": {
            "maximum": 600,
            "minimum": 300,
            "type": "integer",
            "description": "Email expiration time in seconds.",
            "format": "int32"
          },
          "code_length": {
            "maximum": 10,
            "minimum": 4,
            "type": "integer",
            "description": "If Email Code is Selected, Code length is chosen from this option",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The Patch General Email Verification Options Request class"
      },
      "PatchAuthenticationGeneralOptionsOptionsRequest": {
        "type": "object",
        "properties": {
          "consent_required_for_offline_access": {
            "type": "boolean",
            "description": "Since access tokens have finite lifetimes, refresh tokens allow requesting new access tokens without user interaction. The clients need to be explicitly authorized by the User to request for refresh tokens. This option specifies if all the clients need Consent from the User for Offline Access.",
            "example": true
          },
          "allow_remember_me": {
            "type": "boolean",
            "description": "Show RememberMe Checkbox on the SignIn Screen",
            "example": true
          },
          "remember_me_duration": {
            "maximum": 2147483647,
            "minimum": 5,
            "type": "integer",
            "description": "RememberMe Duration in minutes",
            "format": "int32",
            "example": 60
          },
          "email": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchAuthenticationGeneralEmailOptionsRequest"
              }
            ],
            "description": "General Email Requirement Options for Users"
          },
          "phone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchAuthenticationGeneralPhoneOptionsRequest"
              }
            ],
            "description": "General Phone Requirement Options for Users"
          },
          "username": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchAuthenticationGeneralUsernameOptionsRequest"
              }
            ],
            "description": "General Username Requirement Options for Users"
          }
        },
        "additionalProperties": false,
        "description": "The Patch General Authentication Options Request class"
      },
      "PatchAuthenticationGeneralPhoneOptionsRequest": {
        "type": "object",
        "properties": {
          "enable_sign_in": {
            "type": "boolean",
            "description": "Specifies if the users are allowed to sign-in using a phone number",
            "example": true
          },
          "show_at_sign_up": {
            "type": "boolean",
            "description": "Specifies if the users are allowed to enter a phone number at the time of registration.",
            "example": true
          },
          "required_at_sign_up": {
            "type": "boolean",
            "description": "Specifies if the phone number is required at the time of registration.",
            "example": true
          },
          "verification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchAuthenticationGeneralPhoneVerificationOptionsRequest"
              }
            ],
            "description": "Sms verification related to Sign Up"
          }
        },
        "additionalProperties": false,
        "description": "The Patch General Phone Authentication Options Request class"
      },
      "PatchAuthenticationGeneralPhoneVerificationOptionsRequest": {
        "type": "object",
        "properties": {
          "verify_at_sign_up": {
            "type": "boolean",
            "description": "Specifies whether the phone should be verified at registration.",
            "example": true
          },
          "expiration": {
            "maximum": 600,
            "minimum": 60,
            "type": "integer",
            "description": "Sms verification expiration time in seconds.",
            "format": "int32"
          },
          "code_length": {
            "maximum": 10,
            "minimum": 4,
            "type": "integer",
            "description": "Sms Code length is chosen from this option",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The Patch General Phone Verification Options Request class"
      },
      "PatchAuthenticationGeneralUsernameOptionsRequest": {
        "type": "object",
        "properties": {
          "enable_sign_in": {
            "type": "boolean",
            "description": "Specifies if the users are allowed to sign-in using a username",
            "example": true
          },
          "show_at_sign_up": {
            "type": "boolean",
            "description": "Specifies if the users are allowed to enter a username at the time of registration.",
            "example": true
          },
          "required_at_sign_up": {
            "type": "boolean",
            "description": "Specifies if the username is required at the time of registration.",
            "example": true
          },
          "minimum_length": {
            "type": "integer",
            "description": "Specifies the minimum length required for the username.",
            "format": "int32",
            "example": 3
          }
        },
        "additionalProperties": false,
        "description": "The Patch General Username Authentication Options Request class"
      },
      "PatchAuthenticationMethodEmailCodeOptionsRequest": {
        "type": "object",
        "properties": {
          "enable_sign_in": {
            "type": "boolean",
            "description": "Enable Email Code Sign-in",
            "example": true
          },
          "enable_sign_up": {
            "type": "boolean",
            "description": "Enable Email Code Sign-up",
            "example": true
          },
          "enable_jit_provisioning": {
            "type": "boolean",
            "description": "Enable Email Code Enable Jit Provisioning",
            "example": true
          },
          "otp_expiry": {
            "maximum": 900,
            "minimum": 30,
            "type": "integer",
            "description": "Specifies the expiration time in seconds for the OTP to be generated",
            "format": "int32",
            "example": 30
          },
          "otp_length": {
            "maximum": 16,
            "minimum": 4,
            "type": "integer",
            "description": "Specifies the OTP character length",
            "format": "int32",
            "example": 6
          }
        },
        "additionalProperties": false,
        "description": "The Patch Authentication Method Email Code Options Request class"
      },
      "PatchAuthenticationMethodMagicLinkOptionsRequest": {
        "type": "object",
        "properties": {
          "enable_sign_in": {
            "type": "boolean",
            "description": "Enable Magic Link Sign-in",
            "example": true
          },
          "enable_sign_up": {
            "type": "boolean",
            "description": "Enable Magic Link Sign-up",
            "example": true
          },
          "enable_jit_provisioning": {
            "type": "boolean",
            "description": "Enable Magic Link Enable Jit Provisioning",
            "example": true
          },
          "link_expiry": {
            "maximum": 900,
            "minimum": 30,
            "type": "integer",
            "description": "Specifies the expiration time in seconds for the OTP to be generated",
            "format": "int32",
            "example": 30
          }
        },
        "additionalProperties": false,
        "description": "The Patch Authentication Method Magic Link Options Request class"
      },
      "PatchAuthenticationMethodOptionsRequest": {
        "type": "object",
        "properties": {
          "password": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchAuthenticationMethodPasswordOptionsRequest"
              }
            ],
            "description": "Password Authentication Method Settings"
          },
          "sms_code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchAuthenticationMethodSmsCodeOptionsRequest"
              }
            ],
            "description": "Sms Code Authentication Method Settings"
          },
          "magic_link": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchAuthenticationMethodMagicLinkOptionsRequest"
              }
            ],
            "description": "Magic Link Authentication Method Settings"
          },
          "email_code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchAuthenticationMethodEmailCodeOptionsRequest"
              }
            ],
            "description": "Email Code Authentication Method Settings"
          }
        },
        "additionalProperties": false,
        "description": "The Patch Authentication Method Options Request class"
      },
      "PatchAuthenticationMethodPasswordExpirationOptionsRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Specifies the expiration mode.",
            "example": false
          },
          "expiration_period": {
            "maximum": 2592000,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies the password expiration period in minutes.",
            "format": "int32",
            "example": 43200
          }
        },
        "additionalProperties": false,
        "description": "The Patch Authentication Method Password Expiration Options Request class"
      },
      "PatchAuthenticationMethodPasswordOptionsRequest": {
        "type": "object",
        "properties": {
          "enable_sign_in": {
            "type": "boolean",
            "description": "Enable Password Sign-in",
            "example": true
          },
          "enable_sign_up": {
            "type": "boolean",
            "description": "Enable Password Sign-up",
            "example": true
          },
          "strength": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchAuthenticationMethodPasswordStrengthOptionsRequest"
              }
            ],
            "description": "Password Strength Options"
          },
          "reuse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchAuthenticationMethodPasswordReuseOptionsRequest"
              }
            ],
            "description": "Password Re-use Options"
          },
          "expiration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchAuthenticationMethodPasswordExpirationOptionsRequest"
              }
            ],
            "description": "Password Expiration Options"
          },
          "recovery": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchAuthenticationMethodPasswordRecoveryOptionsRequest"
              }
            ],
            "description": "Password Recovery Options"
          }
        },
        "additionalProperties": false,
        "description": "The Patch Authentication Method Password Options Request class"
      },
      "PatchAuthenticationMethodPasswordRecoveryEmailOptionsRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Enable Password recovery through Email."
          },
          "mode": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/TokenSendTypes"
              }
            ],
            "description": "Specifies the recovery mode.",
            "example": "code"
          },
          "otp_expiry": {
            "maximum": 600,
            "minimum": 300,
            "type": "integer",
            "description": "Email expiration time in seconds.",
            "format": "int32",
            "example": 300
          },
          "otp_length": {
            "maximum": 10,
            "minimum": 4,
            "type": "integer",
            "description": "If Email Code is Selected, Code length is chosen from this option",
            "format": "int32",
            "example": 6
          }
        },
        "additionalProperties": false,
        "description": "The Patch authentication method password recovery email options request class"
      },
      "PatchAuthenticationMethodPasswordRecoveryOptionsRequest": {
        "type": "object",
        "properties": {
          "email": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchAuthenticationMethodPasswordRecoveryEmailOptionsRequest"
              }
            ],
            "description": "Password Recovery Email Options"
          },
          "phone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchAuthenticationMethodPasswordRecoveryPhoneOptionsRequest"
              }
            ],
            "description": "Password Recovery Phone Options"
          }
        },
        "additionalProperties": false,
        "description": "The Patch authentication method password recovery options request class"
      },
      "PatchAuthenticationMethodPasswordRecoveryPhoneOptionsRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Enable Password recovery through Phone."
          },
          "otp_expiry": {
            "maximum": 600,
            "minimum": 300,
            "type": "integer",
            "description": "Code expiration time in seconds.",
            "format": "int32",
            "example": 300
          },
          "otp_length": {
            "maximum": 10,
            "minimum": 4,
            "type": "integer",
            "description": "Code length is chosen from this option",
            "format": "int32",
            "example": 6
          }
        },
        "additionalProperties": false,
        "description": "The Patch authentication method password recovery phone options request class"
      },
      "PatchAuthenticationMethodPasswordReuseOptionsRequest": {
        "type": "object",
        "properties": {
          "restriction_mode": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/PasswordRestrictionModes"
              }
            ],
            "description": "Specifies if there should be any restriction for password reuse.",
            "example": "off"
          },
          "restriction_period": {
            "maximum": 2592000,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies the time in minutes in which the password cannot be reused.",
            "format": "int32",
            "example": 43200
          },
          "restriction_count": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies the number of previous passwords which cannot be reused.",
            "format": "int32",
            "example": 5
          }
        },
        "additionalProperties": false,
        "description": "The Patch Authentication Method Password Reuse Options Request class"
      },
      "PatchAuthenticationMethodPasswordStrengthOptionsRequest": {
        "type": "object",
        "properties": {
          "minimum_length": {
            "maximum": 128,
            "minimum": 8,
            "type": "integer",
            "description": "Specifies the minimum character length of password",
            "format": "int32",
            "example": 16
          },
          "require_non_alphanumeric_character": {
            "type": "boolean",
            "description": "Specifies the whether a non alphanumeric character is required in the password.",
            "example": true
          },
          "require_digit": {
            "type": "boolean",
            "description": "Specifies the whether a digit is required in the password.",
            "example": true
          },
          "require_lowercase_character": {
            "type": "boolean",
            "description": "Specifies the whether a lowercase character is required in the password.",
            "example": true
          },
          "require_uppercase_character": {
            "type": "boolean",
            "description": "Specifies the whether a uppercase character is required in the password.",
            "example": true
          },
          "required_unique_characters_count": {
            "minimum": 0,
            "type": "integer",
            "description": "Specifies the number of unique characters required in the password.",
            "format": "int32",
            "example": 4
          }
        },
        "additionalProperties": false,
        "description": "The Patch Authentication Method Password Strength Options Request class"
      },
      "PatchAuthenticationMethodSmsCodeOptionsRequest": {
        "type": "object",
        "properties": {
          "enable_sign_in": {
            "type": "boolean",
            "description": "Enable Sms Code Sign-in",
            "example": true
          },
          "enable_sign_up": {
            "type": "boolean",
            "description": "Enable Sms Code Sign-up",
            "example": true
          },
          "enable_jit_provisioning": {
            "type": "boolean",
            "description": "Enable Sms Code Enable Jit Provisioning",
            "example": true
          },
          "otp_expiry": {
            "maximum": 900,
            "minimum": 30,
            "type": "integer",
            "description": "Specifies the expiration time in seconds for the OTP to be generated",
            "format": "int32",
            "example": 30
          },
          "otp_length": {
            "maximum": 16,
            "minimum": 4,
            "type": "integer",
            "description": "Specifies the OTP character length",
            "format": "int32",
            "example": 6
          }
        },
        "additionalProperties": false,
        "description": "The Patch Authentication Method Sms Code Options Request class"
      },
      "PatchAuthenticationOptionsRequest": {
        "type": "object",
        "properties": {
          "account_protection": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchAccountProtectionOptionsRequest"
              }
            ],
            "description": "Account Protection Options"
          },
          "authentication_methods": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchAuthenticationMethodOptionsRequest"
              }
            ],
            "description": "Authentication Method Options"
          },
          "external_providers": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchExternalProviderOptionsRequest"
              }
            ],
            "description": "External Provider Options"
          },
          "general": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchAuthenticationGeneralOptionsOptionsRequest"
              }
            ],
            "description": "Authentication General Options"
          },
          "logout": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchLogoutOptionsRequest"
              }
            ],
            "description": "Logout Options"
          },
          "sign_up": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchSignUpOptionsRequest"
              }
            ],
            "description": "Sign-up Options"
          }
        },
        "additionalProperties": false,
        "description": "The Patch Authentication Options Request class"
      },
      "PatchBrandingEmailOptionsRequest": {
        "type": "object",
        "properties": {
          "magic_link_sign_in": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchBrandingGenericCustomEmailOptionsRequest"
              }
            ],
            "description": "Magic Link SignIn Branding Options",
            "nullable": true
          },
          "email_code_sign_in": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchBrandingGenericCustomEmailOptionsRequest"
              }
            ],
            "description": "Email Code SignIn Branding Options",
            "nullable": true
          },
          "email_code_verification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchBrandingGenericCustomEmailOptionsRequest"
              }
            ],
            "description": "Email Code Verification Branding Options",
            "nullable": true
          },
          "welcome": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchBrandingGenericCustomEmailOptionsRequest"
              }
            ],
            "description": "Welcome Email Branding Options",
            "nullable": true
          },
          "user_lockout": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchBrandingGenericCustomEmailOptionsRequest"
              }
            ],
            "description": "User Lockout Branding Options",
            "nullable": true
          },
          "magic_link_password_reset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchBrandingGenericCustomEmailOptionsRequest"
              }
            ],
            "description": "Magic Link Password Reset Branding Options",
            "nullable": true
          },
          "email_code_password_reset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchBrandingGenericCustomEmailOptionsRequest"
              }
            ],
            "description": "Email Code Password Reset Branding Options",
            "nullable": true
          },
          "password_updated": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchBrandingGenericCustomEmailOptionsRequest"
              }
            ],
            "description": "Password Updated Branding Options",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The Patch Branding Email Options Request class"
      },
      "PatchBrandingGenericCustomEmailOptionsRequest": {
        "type": "object",
        "properties": {
          "from_email": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "From Email Address",
            "nullable": true,
            "example": "support@acme.com"
          },
          "from_name": {
            "maxLength": 300,
            "minLength": 1,
            "type": "string",
            "description": "From Name",
            "nullable": true,
            "example": "Acme Support"
          },
          "subject": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string",
            "description": "Specifies the text to be used as the email subject",
            "nullable": true,
            "example": "Welcome to ACME"
          },
          "template_uri": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Specifies the URI for the custom template to be used",
            "nullable": true,
            "example": "https://example.com/templates"
          }
        },
        "additionalProperties": false,
        "description": "The Patch Generic Branding Custom Email Options Request class"
      },
      "PatchBrandingGenericCustomSmsOptionsRequest": {
        "type": "object",
        "properties": {
          "template": {
            "maxLength": 300,
            "minLength": 1,
            "type": "string",
            "description": "Custom LiquidJS template for the SMS",
            "example": "Hi {{ name }}"
          }
        },
        "additionalProperties": false,
        "description": "The Patch Generic Branding Custom Sms Options Request class"
      },
      "PatchBrandingOptionsRequest": {
        "type": "object",
        "properties": {
          "email": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchBrandingEmailOptionsRequest"
              }
            ],
            "description": "Email Branding Options"
          },
          "sms": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchBrandingSmsOptionsRequest"
              }
            ],
            "description": "Sms Branding Options"
          },
          "page": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchBrandingPageOptionsRequest"
              }
            ],
            "description": "Page Branding Options"
          },
          "project": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchBrandingProjectOptionsRequest"
              }
            ],
            "description": "Project Branding Options"
          }
        },
        "additionalProperties": false,
        "description": "The Patch Branding Options Request class"
      },
      "PatchBrandingPageOptionsRequest": {
        "type": "object",
        "properties": {
          "background": {
            "maxLength": 350,
            "minLength": 7,
            "type": "string",
            "description": "Specifies the background css string to be used for pages",
            "example": "#f2f2f2"
          },
          "error_color": {
            "minLength": 1,
            "pattern": "^#[0-9A-Fa-f]{6}$",
            "type": "string",
            "description": "Specifies the error colour to be used for pages",
            "example": "#f2f2f2"
          },
          "favicon_uri": {
            "type": "string",
            "description": "Specifies Uri used for the favicon",
            "nullable": true,
            "example": "https://example.com/favicon"
          },
          "logo_uri": {
            "type": "string",
            "description": "Specifies Uri used for the logo",
            "nullable": true,
            "example": "https://example.com/logo"
          },
          "primary_color": {
            "minLength": 1,
            "pattern": "^#[0-9A-Fa-f]{6}$",
            "type": "string",
            "description": "Specifies the primary colour to be used for pages",
            "example": "#f2f2f2"
          },
          "sign_in": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchBrandingSignInPageOptionsRequest"
              }
            ],
            "description": "Sign In Page Branding Options"
          }
        },
        "additionalProperties": false,
        "description": "The Patch Branding Page Options Request class"
      },
      "PatchBrandingProjectOptionsRequest": {
        "type": "object",
        "properties": {
          "default_url": {
            "type": "string",
            "description": "Project Url",
            "nullable": true,
            "example": "https://acme.com"
          },
          "privacy_url": {
            "type": "string",
            "description": "Privacy Url",
            "nullable": true,
            "example": "https://acme.com/privacy"
          },
          "support_url": {
            "type": "string",
            "description": "Support Url",
            "nullable": true,
            "example": "https://acme.com/support"
          },
          "support_email": {
            "type": "string",
            "description": "Support Email",
            "nullable": true,
            "example": "support@acme.com"
          },
          "terms_url": {
            "type": "string",
            "description": "Terms Url",
            "nullable": true,
            "example": "https://acme.com/terms"
          }
        },
        "additionalProperties": false,
        "description": "The Patch Branding Project Options Request class"
      },
      "PatchBrandingSignInPageOptionsRequest": {
        "type": "object",
        "properties": {
          "prompt_password_on_initial_screen": {
            "type": "boolean",
            "description": "If enabled password will be prompted on the same screen as the username.",
            "example": false
          },
          "external_sign_in_methods_first": {
            "type": "boolean",
            "description": "If enabled, External SigIn Methods are shown on top and the Primary SigIn method is shown on bottom.",
            "example": true
          },
          "external_sign_in_methods_order": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "enum",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ExternalIDPs"
                }
              ]
            },
            "description": "Order of the External SigIn methods buttons",
            "example": [
              "google",
              "apple"
            ]
          }
        },
        "additionalProperties": false,
        "description": "The Patch SignIn Page Options Request class"
      },
      "PatchBrandingSmsOptionsRequest": {
        "type": "object",
        "properties": {
          "sms_code_sign_in": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchBrandingGenericCustomSmsOptionsRequest"
              }
            ],
            "description": "Sms Code SignIn Branding Options",
            "nullable": true
          },
          "sms_code_verification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchBrandingGenericCustomSmsOptionsRequest"
              }
            ],
            "description": "Sms Code Verification Branding Options",
            "nullable": true
          },
          "sms_code_password_reset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchBrandingGenericCustomSmsOptionsRequest"
              }
            ],
            "description": "Sms Code Password Reset Branding Options",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The Patch Branding Sms Options Request class"
      },
      "PatchClientRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Specifies if client is enabled.",
            "example": true
          },
          "require_client_secret": {
            "type": "boolean",
            "description": "If set to false, no client secret is needed to request tokens at the token endpoint"
          },
          "client_name": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "The name of the client",
            "example": "Accounting Dashboard"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the client.",
            "nullable": true,
            "example": "Deals with the preparation of financial statements, maintenance of general ledger, and more."
          },
          "client_uri": {
            "type": "string",
            "description": "URI for providing further information about client",
            "nullable": true,
            "example": "https://www.organization/accounting"
          },
          "logo_uri": {
            "type": "string",
            "description": "URI to client logo",
            "nullable": true,
            "example": "https://www.organization/accounting_logo.png"
          },
          "require_consent": {
            "type": "boolean",
            "description": "Specifies whether a consent screen is required to be shown"
          },
          "remember_consent": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/RememberConsentTypes"
              }
            ],
            "description": "Specifies whether user can choose to store consent decisions"
          },
          "show_consent_scope_selection": {
            "type": "boolean",
            "description": "Specifies whether or not the user is allowed to select the scopes on the consent screen"
          },
          "always_include_user_claims_in_id_token": {
            "type": "boolean",
            "description": "When requesting both an id token and access token, should the user claims always be added to the id token instead of requiring the client to use the userinfo endpoint."
          },
          "allowed_grant_types": {
            "minItems": 1,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "enum",
              "allOf": [
                {
                  "$ref": "#/components/schemas/GrantTypes"
                }
              ]
            },
            "description": "Specifies the allowed grant types (legal combinations is required).",
            "example": [
              "hybrid",
              "device_code"
            ]
          },
          "require_pkce": {
            "type": "boolean",
            "description": "Specifies whether a proof key is required for authorization code based token requests"
          },
          "allow_plain_text_pkce": {
            "type": "boolean",
            "description": "Specifies whether a proof key can be sent using plain method (not recommended to be set to `true`)"
          },
          "require_request_object": {
            "type": "boolean",
            "description": "Specifies whether this client needs to wrap the authorize request parameters in a JWT"
          },
          "allow_access_tokens_via_browser": {
            "type": "boolean",
            "description": "Controls whether access tokens are transmitted via the browser for this client. This can prevent accidental leakage of access tokens when multiple response types are allowed."
          },
          "redirect_uris": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "maxLength": 400,
              "minLength": 1,
              "type": "string"
            },
            "description": "Specifies allowed URIs to return tokens or authorization codes to",
            "example": [
              "https://www.organization/accounting/redirect1",
              "https://www.organization/hr/redirect"
            ]
          },
          "post_logout_redirect_uris": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "maxLength": 400,
              "minLength": 1,
              "type": "string"
            },
            "description": "Specifies allowed URIs to redirect to after logout",
            "example": [
              "https://www.organization/accounting/loggedout",
              "https://www.organization/hr/loggedout"
            ]
          },
          "front_channel_logout_uri": {
            "type": "string",
            "description": "Specifies logout URI at client for HTTP front-channel based logout.",
            "nullable": true,
            "example": "https://www.organization/accounting/frontLogout"
          },
          "front_channel_logout_session_required": {
            "type": "boolean",
            "description": "Specifies if the user's session id should be sent to the FrontChannelLogoutUri"
          },
          "back_channel_logout_uri": {
            "type": "string",
            "description": "Specifies logout URI at client for HTTP back-channel based logout.",
            "nullable": true,
            "example": "https://www.organization/accounting/backLogout"
          },
          "back_channel_logout_session_required": {
            "type": "boolean",
            "description": "Specifies if the user's session id should be sent to the BackChannelLogoutUri"
          },
          "allow_offline_access": {
            "type": "boolean",
            "description": "Specifies whether the client can request refresh tokens (by requesting the offline_access scope)"
          },
          "allowed_scopes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "maxLength": 50,
              "minLength": 1,
              "pattern": "^[a-z0-9]+([a-z0-9-._]+[a-z0-9])?$",
              "type": "string"
            },
            "description": "Specifies the scopes the client is allowed to access (by default a client has no access to any resources)",
            "example": [
              "openid",
              "profile",
              "email"
            ]
          },
          "identity_token_lifetime": {
            "maximum": 2592000,
            "minimum": 1,
            "type": "integer",
            "description": "Lifetime of identity token in seconds",
            "format": "int32",
            "example": 300
          },
          "access_token_lifetime": {
            "maximum": 2592000,
            "minimum": 1,
            "type": "integer",
            "description": "Lifetime of access token in seconds",
            "format": "int32",
            "example": 3600
          },
          "authorization_code_lifetime": {
            "maximum": 600,
            "minimum": 1,
            "type": "integer",
            "description": "Lifetime of authorization code in seconds",
            "format": "int32",
            "example": 300
          },
          "consent_lifetime": {
            "maximum": 2592000,
            "minimum": 1,
            "type": "integer",
            "description": "Lifetime of a user consent in seconds",
            "format": "int32",
            "nullable": true,
            "example": 604800
          },
          "absolute_refresh_token_lifetime": {
            "maximum": 2592000,
            "minimum": 1,
            "type": "integer",
            "description": "Maximum lifetime of a refresh token in seconds",
            "format": "int32",
            "example": 2592000
          },
          "sliding_refresh_token_lifetime": {
            "maximum": 2592000,
            "minimum": 1,
            "type": "integer",
            "description": "Sliding lifetime of a refresh token in seconds",
            "format": "int32",
            "example": 1296000
          },
          "refresh_token_usage": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/RefreshTokenUsageTypes"
              }
            ],
            "description": "Specified the validity of a refresh token"
          },
          "update_access_token_claims_on_refresh": {
            "type": "boolean",
            "description": "Specifies a value indicating whether the access token (and its claims) should be updated on a refresh token request"
          },
          "refresh_token_expiration": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/RefreshTokenExpirationTypes"
              }
            ],
            "description": "Specifies how the refresh token expires"
          },
          "access_token_type": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccessTokenTypes"
              }
            ],
            "description": "Specifies whether the access token is a reference token or a self contained JWT token."
          },
          "enable_local_login": {
            "type": "boolean",
            "description": "Specifies whether the local login (Username / Password) is allowed for this client."
          },
          "identity_provider_restrictions": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "enum",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IDPs"
                }
              ]
            },
            "description": "Specifies which authentication providers can be used with this client (if list is empty all providers are allowed)",
            "example": [
              "local",
              "google"
            ]
          },
          "authentication_method_restrictions": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "enum",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AuthenticationMethods"
                }
              ]
            },
            "description": "Specifies which authentication methods can be used with this client (if list is empty all methods are allowed)",
            "example": [
              "local",
              "password"
            ]
          },
          "include_jwt_id": {
            "type": "boolean",
            "description": "Specifies whether JWT access tokens should include an identifier"
          },
          "claims": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateClaimRequest"
            },
            "description": "Allows settings claims for the client (will be included in the access token)."
          },
          "always_send_client_claims": {
            "type": "boolean",
            "description": "Specifies whether client claims should be always included in the access tokens - or only for client credentials flow."
          },
          "client_claims_prefix": {
            "type": "string",
            "description": "If set, the client claim will be prefixed with this value",
            "nullable": true
          },
          "allowed_cors_origins": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            },
            "description": "The allowed CORS origins for JavaScript clients.",
            "example": [
              "https://accounting.organization",
              "https://hr.organization"
            ]
          },
          "user_sso_lifetime": {
            "maximum": 2592000,
            "minimum": 1,
            "type": "integer",
            "description": "The maximum duration (in seconds) since the last time the user authenticated. You can adjust the lifetime of a session token to control when and how often a user is required to reenter credentials instead of being silently authenticated, when using a web application.",
            "format": "int32",
            "nullable": true,
            "example": 604800
          },
          "user_code_type": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/DeviceFlowCodeTypes"
              }
            ],
            "description": "Specifies the type of code that will be generated for the device code flow"
          },
          "device_code_lifetime": {
            "maximum": 3600,
            "minimum": 1,
            "type": "integer",
            "description": "Specifies the device code lifetime.",
            "format": "int32",
            "example": 180
          }
        },
        "additionalProperties": false,
        "description": "The Patch Client class"
      },
      "PatchCommunicationEmailOptionsRequest": {
        "type": "object",
        "properties": {
          "send_grid": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchCommunicationEmailSendGridOptionsRequest"
              }
            ],
            "description": "SendGrid Email Options",
            "nullable": true
          },
          "use_internal_keys": {
            "type": "boolean",
            "description": "Use the the internal keys to send Emails",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "The Patch Communication Email Options Request class"
      },
      "PatchCommunicationEmailSendGridOptionsRequest": {
        "type": "object",
        "properties": {
          "api_key": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "SendGrid Api Key",
            "example": "KJFdlswierur458dfhkJHFwkoepOURFuasd"
          }
        },
        "additionalProperties": false,
        "description": "The Patch Communication Email SendGrid Options Request class"
      },
      "PatchCommunicationOptionsRequest": {
        "type": "object",
        "properties": {
          "email": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchCommunicationEmailOptionsRequest"
              }
            ],
            "description": "Email - Communication Options"
          },
          "sms": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchCommunicationSmsOptionsRequest"
              }
            ],
            "description": "Sms - Communication Options"
          }
        },
        "additionalProperties": false,
        "description": "The Patch Communication Options Request class"
      },
      "PatchCommunicationSmsOptionsRequest": {
        "type": "object",
        "properties": {
          "twilio": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchCommunicationSmsTwilioOptionsRequest"
              }
            ],
            "description": "Twilio Options",
            "nullable": true
          },
          "use_internal_keys": {
            "type": "boolean",
            "description": "Use the the internal keys to send Sms",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "The Patch Communication Sms Options Request class"
      },
      "PatchCommunicationSmsTwilioOptionsRequest": {
        "type": "object",
        "properties": {
          "sid": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Twilio SID",
            "example": "lakshGHIur984573"
          },
          "auth_token": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Twilio Auth Token",
            "example": "867dsfujgFTe6724356tgfds"
          },
          "messaging_sid": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Twilio Messaging SID",
            "nullable": true,
            "example": "867dsfujgFTe6724356tgfds"
          },
          "from": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Twilio From",
            "nullable": true,
            "example": "ACME"
          }
        },
        "additionalProperties": false,
        "description": "The Patch Communication Sms Twilio Options Request class"
      },
      "PatchDeviceFlowOptionsRequest": {
        "type": "object",
        "properties": {
          "code_length": {
            "maximum": 10,
            "minimum": 4,
            "type": "integer",
            "description": "Device Flow Code Length",
            "format": "int32",
            "example": 4
          }
        },
        "additionalProperties": false,
        "description": "The Patch Device Flow Options Request class"
      },
      "PatchExternalProviderAppleOptionsRequest": {
        "type": "object",
        "properties": {
          "enable_sign_in": {
            "type": "boolean",
            "description": "Enable External Provider Sign-in",
            "example": true
          },
          "enable_sign_up": {
            "type": "boolean",
            "description": "Enable External Provider Sign-up",
            "example": true
          },
          "sync_user_profile_always": {
            "type": "boolean",
            "description": "If set to true, will sync the profile with each login",
            "example": true
          },
          "save_tokens": {
            "type": "boolean",
            "description": "Specifies whether the tokens issued by the the provider be saved",
            "example": true
          },
          "client_id": {
            "maxLength": 1000,
            "minLength": 5,
            "type": "string",
            "description": "Client Id issued for the customer by provider",
            "example": "Lkidgf845hKHrfwehf_jgf"
          },
          "client_secret": {
            "maxLength": 1000,
            "minLength": 5,
            "type": "string",
            "description": "Client Secret issued for the customer by provider",
            "example": "JJfgi4597fs9hkmkdfrk_jfhh4uuNBFl"
          },
          "scopes": {
            "type": "array",
            "items": {
              "maxLength": 100,
              "minLength": 1,
              "type": "string"
            },
            "description": "List of provider scopes to be obtained",
            "nullable": true,
            "example": [
              "profile",
              "email",
              "phonenumber"
            ]
          },
          "trust_email_verified_scope": {
            "type": "boolean",
            "description": "Specifies if we should trust the email verified scope received from the external provider.",
            "example": false
          },
          "team_id": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Apple generated teamId",
            "example": "kjGD8745hasd"
          },
          "key_id": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Apple generated keyId",
            "example": "kjGD8745hasd"
          }
        },
        "additionalProperties": false,
        "description": "The Patch Apple Provider Options Request class"
      },
      "PatchExternalProviderFacebookOptionsRequest": {
        "type": "object",
        "properties": {
          "enable_sign_in": {
            "type": "boolean",
            "description": "Enable External Provider Sign-in",
            "example": true
          },
          "enable_sign_up": {
            "type": "boolean",
            "description": "Enable External Provider Sign-up",
            "example": true
          },
          "sync_user_profile_always": {
            "type": "boolean",
            "description": "If set to true, will sync the profile with each login",
            "example": true
          },
          "save_tokens": {
            "type": "boolean",
            "description": "Specifies whether the tokens issued by the the provider be saved",
            "example": true
          },
          "client_id": {
            "maxLength": 1000,
            "minLength": 5,
            "type": "string",
            "description": "Client Id issued for the customer by provider",
            "example": "Lkidgf845hKHrfwehf_jgf"
          },
          "client_secret": {
            "maxLength": 1000,
            "minLength": 5,
            "type": "string",
            "description": "Client Secret issued for the customer by provider",
            "example": "JJfgi4597fs9hkmkdfrk_jfhh4uuNBFl"
          },
          "scopes": {
            "type": "array",
            "items": {
              "maxLength": 1000,
              "minLength": 1,
              "type": "string"
            },
            "description": "List of provider scopes to be obtained",
            "nullable": true,
            "example": [
              "profile",
              "email",
              "phonenumber"
            ]
          },
          "trust_email_verified_scope": {
            "type": "boolean",
            "description": "Specifies if we should trust the email verified scope received from the external provider.",
            "example": false
          },
          "fields": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "maxLength": 1000,
              "minLength": 1,
              "type": "string"
            },
            "description": "Required claims from facebook",
            "nullable": true,
            "example": [
              "email",
              "firstname"
            ]
          }
        },
        "additionalProperties": false,
        "description": "The Patch Facebook Provider Options Request class"
      },
      "PatchExternalProviderGoogleOptionsRequest": {
        "type": "object",
        "properties": {
          "enable_sign_in": {
            "type": "boolean",
            "description": "Enable External Provider Sign-in",
            "example": true
          },
          "enable_sign_up": {
            "type": "boolean",
            "description": "Enable External Provider Sign-up",
            "example": true
          },
          "sync_user_profile_always": {
            "type": "boolean",
            "description": "If set to true, will sync the profile with each login",
            "example": true
          },
          "save_tokens": {
            "type": "boolean",
            "description": "Specifies whether the tokens issued by the the provider be saved",
            "example": true
          },
          "client_id": {
            "maxLength": 1000,
            "minLength": 5,
            "type": "string",
            "description": "Client Id issued for the customer by provider",
            "example": "Lkidgf845hKHrfwehf_jgf"
          },
          "client_secret": {
            "maxLength": 1000,
            "minLength": 5,
            "type": "string",
            "description": "Client Secret issued for the customer by provider",
            "example": "JJfgi4597fs9hkmkdfrk_jfhh4uuNBFl"
          },
          "scopes": {
            "type": "array",
            "items": {
              "maxLength": 1000,
              "minLength": 1,
              "type": "string"
            },
            "description": "List of provider scopes to be obtained",
            "nullable": true,
            "example": [
              "profile",
              "email",
              "phonenumber"
            ]
          },
          "trust_email_verified_scope": {
            "type": "boolean",
            "description": "Specifies if we should trust the email verified scope received from the external provider.",
            "example": false
          }
        },
        "additionalProperties": false,
        "description": "The Patch Google Provider Options Request class"
      },
      "PatchExternalProviderOptionsRequest": {
        "type": "object",
        "properties": {
          "google": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchExternalProviderGoogleOptionsRequest"
              }
            ],
            "description": "Google's ID Provider settings",
            "nullable": true
          },
          "apple": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchExternalProviderAppleOptionsRequest"
              }
            ],
            "description": "Apple's ID Provider Settings",
            "nullable": true
          },
          "facebook": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchExternalProviderFacebookOptionsRequest"
              }
            ],
            "description": "Facebook's Provider Settings",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The Patch Provider Options Request class"
      },
      "PatchIdentityResourceRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Specifies if the resource is enabled.",
            "example": true
          },
          "name": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "The unique name of the resource. This is the value a client will use for the scope parameter in the authorize request.",
            "example": "designation"
          },
          "display_name": {
            "type": "string",
            "description": "Display Name for the Resource",
            "nullable": true,
            "example": "Designation"
          },
          "description": {
            "type": "string",
            "description": "A brief description about the Resource",
            "nullable": true,
            "example": "Current position in the employed organization"
          },
          "show_in_discovery_document": {
            "type": "boolean",
            "description": "Specifies whether this resource is shown in the discovery document.",
            "example": true
          },
          "user_claims": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-z0-9]+([a-z0-9-_.]+[a-z0-9])?$",
              "type": "string"
            },
            "description": "List of associated user claim types that should be included in the Access token.",
            "example": [
              "job_title"
            ]
          },
          "required": {
            "type": "boolean",
            "description": "Specifies whether the user can de-select the scope on the consent screen (if such a feature is implemented in the consent screen).",
            "example": false
          },
          "emphasize": {
            "type": "boolean",
            "description": "Specifies whether the consent screen will emphasize this scope (if such a feature is implemented in the consent screen). Use this setting for sensitive or important scopes.",
            "example": false
          }
        },
        "additionalProperties": false,
        "description": "The Patch Identity Resource class"
      },
      "PatchLogoutOptionsRequest": {
        "type": "object",
        "properties": {
          "automatic_redirect_after_logout": {
            "type": "boolean",
            "description": "Specifies whether the user should be automatically redirected to the client specified URL after sign out.",
            "example": true
          },
          "show_logout_prompt": {
            "type": "boolean",
            "description": "Specifies whether there should be a prompt before log out.",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "The Patch Logout Options Request class"
      },
      "PatchMtlsOptionsRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Enable MTLS",
            "example": true
          },
          "allowed_certificate_types": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/CertificateTypes"
              }
            ],
            "description": "Specifies the permitted certificate types.",
            "example": "all"
          },
          "validate_certificate_use": {
            "type": "boolean",
            "description": "If set to true, will validates whether the certificate is intended for authentication",
            "example": true
          },
          "validate_validity_period": {
            "type": "boolean",
            "description": "If set to true, will verify the certificate's validity period",
            "example": true
          },
          "revocation_mode": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/X509RevocationMode"
              }
            ],
            "description": "Specifies the type of revocation check."
          }
        },
        "additionalProperties": false,
        "description": "The Patch Mtls Options Request class"
      },
      "PatchSignUpCustomFieldOptionsRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Specifies if the users are allowed to enter the claim at the time of signup.",
            "example": true
          },
          "required": {
            "type": "boolean",
            "description": "Specifies if the claim is required at the time of signup.",
            "example": false
          },
          "claim_name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Specifies the name for the claim.",
            "example": "first_name"
          },
          "value_type": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/ValueTypes"
              }
            ],
            "description": "Specifies the claim value type.",
            "example": "string"
          },
          "label": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Specifies the label to be used for the claim at the time of signup.",
            "example": "First Name"
          }
        },
        "additionalProperties": false,
        "description": "The Patch SignUp Custom Field Options Request class"
      },
      "PatchSignUpOptionsRequest": {
        "type": "object",
        "additionalProperties": false,
        "description": "The Patch SignUp Options Request class"
      },
      "PatchTenantRequest": {
        "type": "object",
        "properties": {
          "project_name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Project Name",
            "example": "My App"
          }
        },
        "additionalProperties": false,
        "description": "The Patch Tenant class"
      },
      "PatchTrustStoreCertificateRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Specifies if the certificate is enabled.",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "The Patch Certificate class"
      },
      "PatchTrustStoreRevocationRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Specifies if the certificate is enabled.",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "The Patch Certificate Revocation class"
      },
      "RefreshTokenExpirationTypes": {
        "enum": [
          "sliding",
          "absolute"
        ],
        "type": "string",
        "description": "* **sliding** - When refreshing the token, the lifetime of the refresh token will be renewed (by the amount specified in \"Sliding Refresh Token Lifetime\" parameter). The lifetime will not exceed the time specified in the \"Absolute Refresh Token Lifetime\" parameter\r\n* **absolute** - The refresh token will expire on a fixed point in time (specified by the \"Absolute Refresh Token Lifetime\" parameter)"
      },
      "RefreshTokenUsageTypes": {
        "enum": [
          "reuse",
          "one_time_only"
        ],
        "type": "string",
        "description": "* **reuse** - The refresh token handle will stay the same when refreshing tokens\r\n* **one_time_only** - The refresh token handle will be updated when refreshing tokens"
      },
      "RememberConsentTypes": {
        "enum": [
          "never",
          "always",
          "user_selected"
        ],
        "type": "string",
        "description": "* **never**\r\n* **always**\r\n* **user_selected**"
      },
      "Secret": {
        "required": [
          "creation_time",
          "id",
          "last_updated",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the client secret"
          },
          "description": {
            "type": "string",
            "description": "Brief description of the secret",
            "nullable": true,
            "example": "Banking App Client Secret"
          },
          "expiration": {
            "type": "integer",
            "description": "The expiration date of the secret (in Epoch)",
            "format": "int64",
            "nullable": true,
            "example": 1640975400
          },
          "type": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/SecretTypes"
              }
            ],
            "description": "Specifies type of secret"
          },
          "creation_time": {
            "type": "integer",
            "description": "Specifies the creation time of the client secret (in Epoch).",
            "format": "int64",
            "example": 1640975400
          },
          "last_updated": {
            "type": "integer",
            "description": "Specifies the last update time of the client secret (in Epoch).",
            "format": "int64",
            "example": 1640975400
          }
        },
        "additionalProperties": false,
        "description": "The Client Secret response class"
      },
      "SecretTypes": {
        "enum": [
          "shared_secret",
          "x509_thumbprint",
          "x509_name",
          "x509_certificate_base64",
          "jwk",
          "plain_text"
        ],
        "type": "string",
        "description": "* **shared_secret**\r\n* **x509_thumbprint**\r\n* **x509_name**\r\n* **x509_certificate_base64**\r\n* **jwk**\r\n* **plain_text**"
      },
      "SecretValue": {
        "required": [
          "creation_time",
          "id",
          "last_updated",
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the client secret"
          },
          "description": {
            "type": "string",
            "description": "Brief description of the secret",
            "nullable": true,
            "example": "Banking App Client Secret"
          },
          "value": {
            "type": "string",
            "description": "The secret",
            "example": "d2980ac62d2e58d316728dba55ce"
          },
          "expiration": {
            "type": "integer",
            "description": "The expiration date of the secret (in Epoch)",
            "format": "int64",
            "nullable": true,
            "example": 1640975400
          },
          "type": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/SecretTypes"
              }
            ],
            "description": "Specifies type of secret"
          },
          "creation_time": {
            "type": "integer",
            "description": "Specifies the creation time of the client secret (in Epoch).",
            "format": "int64",
            "example": 1640975400
          },
          "last_updated": {
            "type": "integer",
            "description": "Specifies the last update time of the client secret (in Epoch).",
            "format": "int64",
            "example": 1640975400
          }
        },
        "additionalProperties": false,
        "description": "The Secret response class"
      },
      "SignUpCustomFieldOptions": {
        "required": [
          "claim_name",
          "enabled",
          "label",
          "required",
          "value_type"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Specifies if the users are allowed to enter the claim at the time of signup.",
            "example": true
          },
          "required": {
            "type": "boolean",
            "description": "Specifies if the claim is required at the time of signup.",
            "example": false
          },
          "claim_name": {
            "type": "string",
            "description": "Specifies the name for the claim.",
            "example": "first_name"
          },
          "value_type": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/ValueTypes"
              }
            ],
            "description": "Specifies the claim value type.",
            "example": "string"
          },
          "label": {
            "type": "string",
            "description": "Specifies the label to be used for the claim at the time of signup.",
            "example": "First Name"
          }
        },
        "additionalProperties": false,
        "description": "The SignUp Custom Field Options response class"
      },
      "SignUpOptions": {
        "required": [
          "custom_fields"
        ],
        "type": "object",
        "properties": {
          "custom_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SignUpCustomFieldOptions"
            },
            "description": "Registration Custom Fields Options"
          }
        },
        "additionalProperties": false,
        "description": "The SignUp Options response class"
      },
      "SigningAlgorithms": {
        "enum": [
          "rs_256",
          "rs_384",
          "rs_512",
          "ps_256",
          "ps_384",
          "ps_512",
          "es_256",
          "es_384",
          "es_512"
        ],
        "type": "string",
        "description": "* **rs_256**\r\n* **rs_384**\r\n* **rs_512**\r\n* **ps_256**\r\n* **ps_384**\r\n* **ps_512**\r\n* **es_256**\r\n* **es_384**\r\n* **es_512**"
      },
      "Tenant": {
        "required": [
          "creation_time",
          "domain_name",
          "id",
          "last_updated",
          "management_keys",
          "project_name",
          "region"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Tenant Id",
            "format": "uuid",
            "example": "dfa6f854-4ee3-4585-bdd0-650d4efb80ab"
          },
          "domain_name": {
            "type": "string",
            "description": "If the domain is myapp, the full Auth server url will look like https://myapp.monocloud.com",
            "example": "myapp"
          },
          "project_name": {
            "type": "string",
            "description": "Project Name",
            "example": "My App"
          },
          "region": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/TenantRegion"
              }
            ],
            "description": "Tenant Region",
            "example": "us"
          },
          "management_keys": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TenantManagementKeys"
              }
            ],
            "description": "Tenant's management Keys"
          },
          "creation_time": {
            "type": "integer",
            "description": "Specifies the creation time of the tenant (in Epoch).",
            "format": "int64",
            "example": 1640975400
          },
          "last_updated": {
            "type": "integer",
            "description": "Specifies the last updated time of the tenant (in Epoch).",
            "format": "int64",
            "example": 1640975400
          }
        },
        "additionalProperties": false,
        "description": "The Tenants response class"
      },
      "TenantManagementKeys": {
        "required": [
          "private_keys",
          "public_key"
        ],
        "type": "object",
        "properties": {
          "public_key": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TenantPublicKey"
              }
            ],
            "description": "Tenants Public Key"
          },
          "private_keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TenantPrivateKey"
            },
            "description": "List of Tenant's Private Keys"
          }
        },
        "additionalProperties": false,
        "description": "The Tenants Management Keys response class"
      },
      "TenantPrivateKey": {
        "required": [
          "expires_at",
          "key_id",
          "scopes"
        ],
        "type": "object",
        "properties": {
          "key_id": {
            "type": "string",
            "description": "Id of the Key",
            "example": "9RjOsjurmclfjsdhfd"
          },
          "name": {
            "type": "string",
            "description": "Name Given by the customer (you) to identify the key",
            "nullable": true,
            "example": "Example Name"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expires_at": {
            "type": "integer",
            "description": "Specifies expiration of the key in Epoch",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "The Tenants Private key Response Class"
      },
      "TenantPublicKey": {
        "required": [
          "expires_at",
          "key_id"
        ],
        "type": "object",
        "properties": {
          "key_id": {
            "type": "string",
            "description": "Id of the Key",
            "example": "9RjOsjurmclfjsdhfd"
          },
          "expires_at": {
            "type": "integer",
            "description": "Specifies expiration of the key",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "The Tenants Public key Response Class"
      },
      "TenantRegion": {
        "enum": [
          "as",
          "eu",
          "us"
        ],
        "type": "string",
        "description": "* **as**\r\n* **eu**\r\n* **us**"
      },
      "ThemeNames": {
        "enum": [
          "default"
        ],
        "type": "string",
        "description": "* **default**"
      },
      "TokenSendTypes": {
        "enum": [
          "link",
          "code"
        ],
        "type": "string",
        "description": "* **link**\r\n* **code**"
      },
      "TrustStore": {
        "required": [
          "certificates",
          "revocations"
        ],
        "type": "object",
        "properties": {
          "certificates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrustStoreCertificate"
            },
            "description": "List of certificates."
          },
          "revocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrustStoreRevocation"
            },
            "description": "List of certificate revocations."
          }
        },
        "additionalProperties": false,
        "description": "Trust Store Response"
      },
      "TrustStoreCertificate": {
        "required": [
          "enabled",
          "id",
          "value"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Certificate Id.",
            "example": "af2cc4b4-5558-41b1-89d1-6e7c69ab92bb"
          },
          "enabled": {
            "type": "boolean",
            "description": "Specifies if the certificate is enabled.",
            "example": true
          },
          "value": {
            "type": "string",
            "description": "Certificate Value.",
            "example": "certificate_value"
          }
        },
        "additionalProperties": false,
        "description": "Trust Store Certificate Response"
      },
      "TrustStoreRevocation": {
        "required": [
          "enabled",
          "id",
          "value"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Certificate Id.",
            "example": "cbf7566e-03ec-4ded-93d2-b059ded6b62e"
          },
          "enabled": {
            "type": "boolean",
            "description": "Specifies if the certificate is enabled.",
            "example": true
          },
          "value": {
            "type": "string",
            "description": "Certificate Crl Value.",
            "example": "certificate_revocation_value"
          }
        },
        "additionalProperties": false,
        "description": "Trust Store Certificate Revocation Response"
      },
      "UserEmail": {
        "required": [
          "authentication_methods",
          "email",
          "id",
          "id_ps",
          "primary",
          "verified"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "primary": {
            "type": "boolean"
          },
          "id_ps": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "enum",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IDPs"
                }
              ]
            }
          },
          "authentication_methods": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "enum",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AuthenticationMethods"
                }
              ]
            }
          },
          "verified": {
            "type": "boolean"
          },
          "email": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "The User Email response class"
      },
      "UserIDPSummary": {
        "required": [
          "creation_time",
          "idp",
          "last_updated",
          "provider_user_id"
        ],
        "type": "object",
        "properties": {
          "idp": {
            "type": "enum",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalIDPs"
              }
            ],
            "description": "Specifies the IDP name.",
            "example": "local"
          },
          "provider_user_id": {
            "type": "string",
            "description": "Specifies the idp user Id.",
            "example": "79a500f9-aba6-4f03-baec-c18f4b7136ad"
          },
          "creation_time": {
            "type": "integer",
            "description": "Specifies the creation time of the scheme (in Epoch).",
            "format": "int64",
            "example": 1640975400
          },
          "last_updated": {
            "type": "integer",
            "description": "Specifies the last update time of the scheme (in Epoch).",
            "format": "int64",
            "example": 1640975400
          }
        },
        "additionalProperties": false
      },
      "UserLockoutTypes": {
        "enum": [
          "ip",
          "user_account"
        ],
        "type": "string",
        "description": "* **ip**\r\n* **user_account**"
      },
      "UserPhone": {
        "required": [
          "authentication_methods",
          "id",
          "id_ps",
          "phone",
          "primary",
          "verified"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "primary": {
            "type": "boolean"
          },
          "id_ps": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "enum",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IDPs"
                }
              ]
            }
          },
          "authentication_methods": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "enum",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AuthenticationMethods"
                }
              ]
            }
          },
          "verified": {
            "type": "boolean"
          },
          "phone": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "The User Phone response class"
      },
      "UserSummary": {
        "required": [
          "creation_time",
          "disabled",
          "emails",
          "id_ps",
          "last_updated",
          "phone_numbers",
          "user_id",
          "usernames"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "Unique identifier of the user.",
            "example": "UOtBaOybB6dTpIJNrnkRw"
          },
          "disabled": {
            "type": "boolean",
            "description": "Specifies whether the account has been disabled.",
            "example": true
          },
          "emails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEmail"
            },
            "description": "List of registered schemes of user."
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserPhone"
            },
            "description": "List of registered schemes of user."
          },
          "usernames": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserUsername"
            },
            "description": "List of registered schemes of user."
          },
          "id_ps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserIDPSummary"
            },
            "description": "List of registered idps of user."
          },
          "creation_time": {
            "type": "integer",
            "description": "Specifies the creation time of the user (in Epoch).",
            "format": "int64",
            "example": 1640975400
          },
          "last_updated": {
            "type": "integer",
            "description": "Specifies the last update time of the user (in Epoch).",
            "format": "int64",
            "example": 1640975400
          }
        },
        "additionalProperties": false,
        "description": "The User Summary response class"
      },
      "UserUsername": {
        "required": [
          "authentication_methods",
          "id",
          "id_ps",
          "primary",
          "username"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "primary": {
            "type": "boolean"
          },
          "id_ps": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "enum",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IDPs"
                }
              ]
            }
          },
          "authentication_methods": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "enum",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AuthenticationMethods"
                }
              ]
            }
          },
          "username": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "The User Username response class"
      },
      "ValueTypes": {
        "enum": [
          "string",
          "email",
          "phone"
        ],
        "type": "string",
        "description": "* **string**\r\n* **email**\r\n* **phone**"
      },
      "X509RevocationMode": {
        "enum": [
          "no_check",
          "offline"
        ],
        "type": "string",
        "description": "* **no_check** - Will not check for revocation.\r\n* **offline** - Will check for revocation against the customer generated revocation list"
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "JWT or Reference Token",
        "scheme": "bearer"
      },
      "X-API-KEY": {
        "type": "apiKey",
        "description": "Api key needed to access the endpoints. X-API-KEY: My_API_Key",
        "name": "X-API-KEY",
        "in": "header"
      },
      "X-TENANT-ID": {
        "type": "apiKey",
        "description": "Tenant Id needed to access the endpoints. X-TENANT-ID: My_Tenant_Id",
        "name": "X-TENANT-ID",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ],
      "X-TENANT-ID": [ ]
    },
    {
      "X-API-KEY": [ ],
      "X-TENANT-ID": [ ]
    }
  ]
}